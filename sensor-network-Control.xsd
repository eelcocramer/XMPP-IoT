<?xml version='1.0' encoding='UTF-8'?>
<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:iot:control'
    xmlns='urn:xmpp:iot:control'
    xmlns:sn='urn:xmpp:iot:sensordata'
    xmlns:xd="jabber:x:data"
    xmlns:xdv="http://jabber.org/protocol/xdata-validate"
    xmlns:xdl="http://jabber.org/protocol/xdata-layout"
    elementFormDefault='qualified'>
 
	<xs:import namespace='urn:xmpp:iot:sensordata'/>
	<xs:import namespace='jabber:x:data'/>
	<xs:import namespace='http://jabber.org/protocol/xdata-validate'/>
	<xs:import namespace='http://jabber.org/protocol/xdata-layout'/>
 
	<xs:element name='set'>
		<xs:complexType>
			<xs:choice minOccurs='0' maxOccurs='unbounded'>
				<xs:element name='node' type='NodeReference'/>
				<xs:element name='boolean' type='BooleanParameter'/>
				<xs:element name='color' type='ColorParameter'/>
				<xs:element name='date' type='DateParameter'/>
				<xs:element name='dateTime' type='DateTimeParameter'/>
				<xs:element name='double' type='DoubleParameter'/>
				<xs:element name='duration' type='DurationParameter'/>
				<xs:element name='int' type='IntParameter'/>
				<xs:element name='long' type='LongParameter'/>
				<xs:element name='string' type='StringParameter'/>
				<xs:element name='time' type='TimeParameter'/>
				<xs:element ref='xd:x'/>
			</xs:choice>
			<xs:attributeGroup ref='tokens'/>
		</xs:complexType>
	</xs:element>
 
	<xs:element name='setResponse'>
		<xs:complexType>
			<xs:choice minOccurs='0' maxOccurs='unbounded'>
				<xs:element name='node' type='NodeReference'/>
				<xs:element name='error' type='ParameterError'/>
			</xs:choice>
			<xs:attributeGroup ref='responseCode'/>
		</xs:complexType>
	</xs:element>
 
	<xs:element name='getForm'>
		<xs:complexType>
			<xs:sequence minOccurs='0' maxOccurs='unbounded'>
				<xs:element name='node' type='NodeReference'/>
			</xs:sequence>
			<xs:attributeGroup ref='tokens'/>
		</xs:complexType>
	</xs:element>
 
	<xs:element name='getFormResponse'>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='xd:x' minOccurs="0" maxOccurs="1"/>
			</xs:sequence>
			<xs:attributeGroup ref='responseCode'/>
		</xs:complexType>
	</xs:element>
 
	<xs:element name='parameterGroup'>
		<xs:complexType>
			<xs:attribute name='name' type='xs:string' use='required'/>
		</xs:complexType>
	</xs:element>
 
	<xs:attributeGroup name='nodeReference'>
		<xs:attribute name='nodeId' type='xs:string' use='required'/>
		<xs:attribute name='sourceId' type='xs:string' use='optional'/>
		<xs:attribute name='cacheType' type='xs:string' use='optional'/>
	</xs:attributeGroup>
 
	<xs:attributeGroup name='tokens'>
		<xs:attribute name='serviceToken' type='xs:string' use='optional'/>
		<xs:attribute name='deviceToken' type='xs:string' use='optional'/>
		<xs:attribute name='userToken' type='xs:string' use='optional'/>
	</xs:attributeGroup>
 
	<xs:attributeGroup name='responseCode'>
		<xs:attribute name='result' type='ResponseCode' use='required'/>
	</xs:attributeGroup>
 
	<xs:complexType name='Parameter' abstract='true'>
		<xs:attribute name='name' type='xs:string' use='required'/>
	</xs:complexType>
 
	<xs:complexType name='BooleanParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:boolean' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='ColorParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='Color' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='DateParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:date' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='DateTimeParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:dateTime' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='DoubleParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:double' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='DurationParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:duration' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='IntParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:int' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='LongParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:long' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='StringParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:string' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='TimeParameter'>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:time' use='required'/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
 
	<xs:complexType name='ParameterError'>
		<xs:simpleContent>
			<xs:extension base='xs:string'>
				<xs:attribute name='var' type='xs:string' use='required'/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
 
	<xs:complexType name='NodeReference'>
		<xs:attributeGroup ref='nodeReference'/>
	</xs:complexType>
 
	<xs:simpleType name='Color'>
		<xs:restriction base='xs:string'>
			<xs:pattern value='^([0-9a-fA-F]{6})|([0-9a-fA-F]{8})$'/>
		</xs:restriction>
	</xs:simpleType>
 
	<xs:simpleType name='ResponseCode'>
		<xs:restriction base='xs:string'>
			<xs:enumeration value='OK'/>
			<xs:enumeration value='NotFound'/>
			<xs:enumeration value='InsufficientPrivileges'/>
			<xs:enumeration value='Locked'/>
			<xs:enumeration value='NotImplemented'/>
			<xs:enumeration value='FormError'/>
			<xs:enumeration value='OtherError'/>
		</xs:restriction>
	</xs:simpleType>
 
</xs:schema>