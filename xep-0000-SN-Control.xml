<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
    <!ENTITY % ents SYSTEM 'xep.ent'>
    %ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
    <header>
        <title>Sensor Networks - Control</title>
        <abstract>This specification describes how to control devices or actuators in an XMPP-based sensor network.</abstract>
        <legal>
            <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2013 by the XMPP Standards Foundation (XSF).</copyright>
            <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
            <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
            <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
            <conformance>
                This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://www.xmpp.org/extensions/ipr-policy.shtml'>http://www.xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).
            </conformance>
        </legal>
        <number>xxxx</number>
        <status>ProtoXEP</status>
        <type>Standards Track</type>
        <sig>Standards</sig>
        <approver>Council</approver>
        <dependencies>
            <spec>XEP-0001</spec>
            <spec>XEP-0004</spec>
            <spec>XEP-0030</spec>
            <spec>XEP-0122</spec>
            <spec>XEP-0137</spec>
            <spec>XEP-0141</spec>
            <spec>sensor-data</spec>
            <spec>sensor-network-provisioning</spec>
            <spec>xep-0000-DynamicForms</spec>
            <spec>xep-0000-ColorParameter</spec>
        </dependencies>
        <supersedes/>
        <supersededby/>
        <shortname>NOT_YET_ASSIGNED</shortname>
        <author>
            <firstname>Peter</firstname>
            <surname>Waher</surname>
            <email>peter.waher@clayster.com</email>
            <jid>peter.waher@jabber.org</jid>
            <uri>http://se.linkedin.com/pub/peter-waher/1a/71b/a29/</uri>
        </author>
        <revision>
            <version>0.0.1</version>
            <date>2013-03-27</date>
            <initials>pwa</initials>
            <remark>
                <p>First draft.</p>
            </remark>
        </revision>
    </header>
    <section1 topic='Introduction' anchor='intro'>
        <p>
            Actuators are devices in sensor networks that can be controlled through the network and act with the outside world. In sensor networks and Internet of Things applications,
            actuators make it possible to automate real-world processes. This document defines a mechanism whereby actuators can be controlled in XMPP-based sensor networks, making it
            possible to integrate sensors and actuators of different brands, makes and models into larger Internet of Things applications.
        </p>
        <p>
            Note has to be taken, that these XEP's are designed for implementation in sensors, many of which have very limited amount of memory (both RAM and ROM) or resources (processing power).
            Therefore, simplicity is of utmost importance. Furthermore, sensor networks can become huge, easily with millions of devices in peer-to-peer networks.
        </p>
        <p>
            Sensor networks contains many different architectures and use cases. For this reason, the sensor network standards have been divided into multiple XEPs according to the following table:
        </p>
        <table caption='Sensor Network XEPs'>
            <tr>
                <th>XEP</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>XEP-0000-ColorParameter</td>
                <td>Defines extensions for how color parameters can be handled, based on &xep0004;</td>
            </tr>
            <tr>
                <td>XEP-0000-DynamicForms</td>
                <td>Defines extensions for how dynamic forms can be created, based on &xep0004;, &xep0122;, &xep0137; and &xep0141;.</td>
            </tr>
            <tr>
                <td>exi</td>
                <td>
                    Defines how to EXI can be used in XMPP to achieve efficient compression of data. Albeit not a sensor network specific XEP, this XEP should be considered
                    in all sensor network implementations where memory and packet size is an issue.
                </td>
            </tr>
            <tr>
                <td>xep-0000-SN-BatteryPoweredSensors</td>
                <td>Defines how to handle the peculiars related to battery powered devices, and other devices intermittently available on the network.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Concentrators</td>
                <td>Defines how to handle architectures containing concentrators or servers handling multiple sensors.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Control</td>
                <td>This specification. Defines how to control actuators and other devices in sensor networks.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Discovery</td>
                <td>Defines the peculiars of sensor discovery in sensor networks. Apart from discovering sensors by JID, it also defines how to discover sensors based on location, etc.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Events</td>
                <td>Defines how sensors send events, how event subscription, hysteresis levels, etc., are configured.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Interoperability</td>
                <td>Defines guidelines for how to achieve interoperability in sensor networks, publishing interoperability interfaces for different types of devices.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Multicast</td>
                <td>Defines how sensor data can be multicast in efficient ways.</td>
            </tr>
            <tr>
                <td>sensor-network-provisioning</td>
                <td>Defines how provisioning, the management of access privileges, etc., can be efficiently and easily implemented.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-PubSub</td>
                <td>Defines how efficient publication of sensor data can be made in sensor networks.</td>
            </tr>
            <tr>
                <td>sensor-data</td>
                <td>
                    Provides the underlying architecture, basic operations and data structures for sensor data communication over XMPP networks.
                    It includes a hardware abstraction model, removing any technical detail implemented in underlying technologies. This XEP is used by all other sensor network XEPs.
                </td>
            </tr>
        </table>
    </section1>
    <section1 topic='Glossary' anchor='glossary'>
        <p>The following table lists common terms and corresponding descriptions.</p>
        <dl>
            <di>
                <dt>Actuator</dt>
                <dd>Device containing at least one configurable property or output that can and should be controlled by some other entity or device.</dd>
            </di>
            <di>
                <dt>Computed Value</dt>
                <dd>A value that is computed instead of measured.</dd>
            </di>
            <di>
                <dt>Concentrator</dt>
                <dd>Device managing a set of devices which it publishes on the XMPP network.</dd>
            </di>
            <di>
                <dt>Field</dt>
                <dd>
                    One item of sensor data. Contains information about: Node, Field Name, Value, Precision, Unit, Value Type, Status, Timestamp, Localization information, etc.
                    Fields should be unique within the triple (Node ID, Field Name, Timestamp).
                </dd>
            </di>
            <di>
                <dt>Field Name</dt>
                <dd>Name of a field of sensor data. Examples: Energy, Volume, Flow, Power, etc.</dd>
            </di>
            <di>
                <dt>Field Type</dt>
                <dd>What type of value the field represents. Examples: Momentary Value, Status Value, Identification Value, Calculated Value, Peak Value, Historical Value, etc.</dd>
            </di>
            <di>
                <dt>Historical Value</dt>
                <dd>A value stored in memory from a previous timestamp.</dd>
            </di>
            <di>
                <dt>Identification Value</dt>
                <dd>A value that can be used for identification. (Serial numbers, meter IDs, locations, names, etc.)</dd>
            </di>
            <di>
                <dt>Localization information</dt>
                <dd>Optional information for a field, allowing the sensor to control how the information should be presented to human viewers.</dd>
            </di>
            <di>
                <dt>Meter</dt>
                <dd>A device possible containing multiple sensors, used in metering applications. Examples: Electricity meter, Water Meter, Heat Meter, Cooling Meter, etc.</dd>
            </di>
            <di>
                <dt>Momentary Value</dt>
                <dd>A momentary value represents a value measured at the time of the read-out.</dd>
            </di>
            <di>
                <dt>Node</dt>
                <dd>
                    Graphs contain nodes and edges between nodes. In Sensor Networks, sensors, actuators, meters, devices, gatewats, etc., are often depicted as nodes and links between sensors (friendships)
                    are depicted as edges. In abstract terms, it's easier to talk about a Node, than have to list different types of nodes possible (sensors, actuators, meters, devices, gateways, etc.).
                    Each Node has a Node ID.
                </dd>
            </di>
            <di>
                <dt>Node ID</dt>
                <dd>
                    An ID uniquelly identifying a node within its corresponding context. If a globally unique ID is desired, an architechture should be used using a universally accepted
                    ID scheme.
                </dd>
            </di>
            <di>
                <dt>Parameter</dt>
                <dd>
                    Readable and/or writable property on a node/device. The XEP xep-0000-SN-Concentrators deals with reading and writing parameters
                    on nodes/devices. Fields are not parameters, and parameters are not fields.
                </dd>
            </di>
            <di>
                <dt>Peak Value</dt>
                <dd>A maximum or minimum value during a given period.</dd>
            </di>
            <di>
                <dt>Precision</dt>
                <dd>
                    In physics, precision determines the number of digits of precision. In sensor networks however, this definition is not easily applicable. Instead, precision
                    determines, for example, the number of decimals of precision, or power of precision. Example: 123.200 MWh contains 3 decimals of precision. All entities parsing and
                    delivering field information in sensor networks should always retain the number of decimals in a message.
                </dd>
            </di>
            <di>
                <dt>Sensor</dt>
                <dd>
                    Device measuring at least one digital value (0 or 1) or analog value (value with precision and physical unit). Examples: Temperature sensor, pressure sensor, etc.
                    Sensor values are reported as fields during read-out. Each sensor has a unique Node ID.
                </dd>
            </di>
            <di>
                <dt>SN</dt>
                <dd>Sensor Network. A network consisting, but not limited to sensors, where transport and use of sensor data is of primary concern. A sensor network may contain actuators, network applications, monitors, services, etc.</dd>
            </di>
            <di>
                <dt>Status Value</dt>
                <dd>A value displaying status information about something.</dd>
            </di>
            <di>
                <dt>Timestamp</dt>
                <dd>Timestamp of value, when the value was sampled or recorded.</dd>
            </di>
            <di>
                <dt>Token</dt>
                <dd>
                    A client, device or user can get a token from a provisioning server. These tokens can be included in requeests to other entities in the network, so these entities can validate
                    access rights with the provisioning server.
                </dd>
            </di>
            <di>
                <dt>Unit</dt>
                <dd>Physical unit of value. Example: MWh, l/s, etc.</dd>
            </di>
            <di>
                <dt>Value</dt>
                <dd>A field value.</dd>
            </di>
            <di>
                <dt>Value Status</dt>
                <dd>Status of field value. Contains important status information for Quality of Service purposes. Examples: Ok, Error, Warning, Time Shifted, Missing, Signed, etc.</dd>
            </di>
            <di>
                <dt>Value Type</dt>
                <dd>Can be numeric, string, boolean, Date &amp; Time, Time Span or Enumeration.</dd>
            </di>
            <di>
                <dt>WSN</dt>
                <dd>Wireless Sensor Network, a sensor network including wireless devices.</dd>
            </di>
            <di>
                <dt>XMPP Client</dt>
                <dd>Application connected to an XMPP network, having a JID. Note that sensors, as well as applications requesting sensor data can be XMPP clients.</dd>
            </di>
        </dl>
    </section1>
    <section1 topic='Use Cases' anchor='usecases'>
        <p>
            Control in sensor networks is about setting output values. To make the implementation simple, it is assumed that control of a device can be made using a single message.
            If only a simple set operation is requested, a &lt;message&gt; stanza can be sent. If an acknowledgement (ACK) of the operation (or Not-acknowledgement NACK) of the operation
            is desired, an &lt;iq&gt; stanza can be used instead.
        </p>
        <p>
            To set control parameters in a device, the <strong>set</strong> command is sent to the device. The set command allows for two different ways of setting control parameters:
        </p>
        <ul>
            <li>Using strongly typed parameters. This way performs best in EXI compression and automation.</li>
            <li>Using a weakly typed data form. This might be better for manually setting control parameters, since it allows the device to give the user a better user interface explaining
            available control parameters.</li>
        </ul>
        <p>
            What type of control parameters there are available in different types of devices is described in
            <note>
                XEP-xxxx: Sensor Networks - Interoperability &lt;<link url='xep-0000-SN-Interoperability.html'>xep-0000-SN-Interoperability.html</link>&gt;
            </note>.
        </p>
        <p>
            If the device is a concentrator, as defined in
            <note>
                XEP-xxxx: Sensor Networks - Concentrators &lt;<link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>&gt;
            </note>, an handles multiple nodes behind it, which node(s) to control is defined using <strong>node</strong> elements. If not a concentrator,
            the use of <strong>node</strong> elements is not necessary, and control commands are sent directly to the device itself.
        </p>
        <section2 topic='Control commands'>
            <section3 topic='Sending a control command using a message stanza'>
                <p>
                    Following is an example of a control command sent using a message stanza:
                </p>
                <example caption='Message stanza for setting a value'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='digital.output@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <boolean name='Output' value='true'/>
      </set>
   </message>]]>
                </example>
                <p>
                    Note that any response is supressed when sending a message stanza, regardless if the desired control command could be executed or not. The following example shows how the same
                    control command could be issued using an IQ stanza instead:
                </p>
            </section3>
            <section3 topic='Sending a control command using an IQ stanza'>
                <p>
                    Following is an example of a control command sent using an iq stanza:
                </p>
                <example caption='IQ stanza for setting a value'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='digital.output@clayster.com'
       id='1'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='result'
       from='digital.output@clayster.com'
       to='master@clayster.com/amr'
       id='1'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OK'/>
   </iq>]]>
                </example>
                <p>
                    In the following use cases, often a message stanza will be used to illustrate the point. However, the same operation could equally well be used using an iq stanza instead.
                </p>
            </section3>
            <section3 topic='Control failure response'>
                <p>
                    By using an IQ stanza, the caller can receive an acknowledgement of the reception of the command, or error information if the command could not be processed.
                    Following is an example of a control command sent using an iq stanza, where the receiver reports an error back to the caller:
                </p>
                <example caption='Control failure response'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='analog.output@clayster.com'
       id='2'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='error'
       from='analog.output@clayster.com'
       to='master@clayster.com/amr'
       id='2'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OtherError'>
          <error var='Output'>Invalid parameter type.</error>
      </setResponse>
   </iq>]]>
                </example>
            </section3>
        </section2>
        <section2 topic='Setting control parameters'>
            <p>
                The following sub-sections illustrate how to set parameters of different types in a device.
            </p>
            <section3 topic='Setting a single boolean-valued control parameter'>
                <p>
                    Setting single boolean-valued control parameters is a common use case, for instance when controlling digital outputs. The following example shows how a boolean value
                    can be set in a device.
                </p>
                <example caption='Setting a single boolean-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='digital.output@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <boolean name='Output' value='true'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single 32-bit integer-valued control parameter'>
                <p>
                    Setting single integer-valued control parameters is a common use case, for instance when controlling analog outputs. The following example shows how a 32-bit integer value
                    can be set in a device.
                </p>
                <example caption='Setting a single 32-bit integer-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='analog.output@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <int name='Output' value='50000'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single 64-bit integer-valued control parameter'>
                <p>
                    Setting single integer-valued control parameters is a common use case, for instance when controlling analog outputs. Even though 32-bit integers may cover most control needs,
                    it might in some cases be limiting. Therefore, a 64-bit control parameters can be created. The following example shows how a 64-bit integer value
                    can be set in a device.
                </p>
                <example caption='Setting a single 64-bit integer-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='megaprecision.analog.output@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <long name='Output' value='500000000000000'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single string-valued control parameter'>
                <p>
                    Setting single string-valued control parameters is a common use case, for instance when controlling text displays. The following example shows how a string value
                    can be set in a device.
                </p>
                <example caption='Setting a single string-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='text.display@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <string name='Row1' value='Temperature: 21.4 °C'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single double-valued control parameter'>
                <p>
                    Setting single double-valued control parameters can be an alternative form of controlling analog outputs for instance. The following example shows how a double value
                    can be set in a device.
                </p>
                <example caption='Setting a single double-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='analog.output2@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <double name='4-20mA' value='8.192'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single date-valued control parameter'>
                <p>
                    Setting date-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a date value can be set in a device.
                </p>
                <example caption='Setting a single date-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='alarm@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <date name='TariffStartDate' value='2013-05-01'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single time-valued control parameter'>
                <p>
                    Setting time-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a time value can be set in a device.
                </p>
                <example caption='Setting a single time-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='alarm@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <time name='Alarm Time' value='08:00:00'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single date &amp; time-valued control parameter'>
                <p>
                    Setting date &amp; time-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a date &amp; time value can be set in a device.
                </p>
                <example caption='Setting a single date &amp; time-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='alarm@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <dateTime name='Alarm Time' value='2013-04-02T08:00:00'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single time-valued control parameter'>
                <p>
                    Setting time-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a time value can be set in a device.
                </p>
                <example caption='Setting a single time-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='alarm@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <time name='Alarm Time' value='08:00:00'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single duration-valued control parameter'>
                <p>
                    Setting duration-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a duration value can be set in a device.
                </p>
                <example caption='Setting a single duration-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='alarm@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <duration name='Alarm Duration' value='PT3M30S'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single color-valued control parameter'>
                <p>
                    Setting single color values in a device can occur in instances where color or lighting is important. Sometimes color is set using enumerations (string-valued
                    or integer-valued parameters), and sometimes as a color property. The following example shows how a color value can be set in a device.
                </p>
                <example caption='Setting a single color-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='spotlight@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <color name='Color' value='3399FF'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting multiple control parameters at once'>
                <p>
                    Often, setting a single control parameter is not sufficient for a control action. In these cases, setting multiple control parameters at once is necessary.
                    The <strong>set</strong> command makes this easy however, since it allows for any number of control parameters to be set at once, as the following example shows:
                </p>
                <example caption='Setting multiple control parameters at once'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='dimmer@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <int name='FadeTimeMilliseconds' value='500'/>
         <int name='OutputPercent' value='10'/>
      </set>
   </message>]]>
                </example>
                <p>
                    Sometimes the order of control parameters are important in the device, and sometimes the parameters form part of a whole. It depends on the context of the device.
                    In the above example, the order is important. When the OutputPercent control parameter is set, it will start to fade in or out to the desired setting (10%), using the
                    fade time set previously. If the FadeTimeMilliseconds control parameter would have been set after the OutputPercent parameter, the fading would have been started using
                    the previous setting, which might be unknown.
                </p>
                <p>
                    The order of control parameters to use depends on the device. The <link url='#controlform'>Control Form</link> lists available control parameters of the device in the
                    order they are expected to be sent to the device. The XEP <link url='xep-0000-SN-Interoperability.html'>xep-0000-SN-Interoperability</link> details what control parameters
                    must be available for different interfaces, and if the order of control parameters is important.
                </p>
            </section3>
        </section2>
        <section2 topic='Control forms'>
            <section3 topic='Getting a control form' anchor='controlform'>
                <p>
                    A client can get a control form containing available control parameters of the device. This is done using the <strong>getForm</strong> command,
                    as is shown in the following example:
                </p>
                <example caption='Getting a control form'>
                    <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='dimmer@clayster.com'
       id='3'>
      <getForm xmlns='urn:xmpp:sn:control' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='dimmer@clayster.com'
       to='master@clayster.com/amr'
       id='3'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Dimmer</title>
              <xdl:page label='Output'>
                  <xdl:fieldref var='FaceTimeMilliseconds'/>
                  <xdl:fieldref var='OutputPercent'/>
                  <xdl:fieldref var='MainSwitch'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single' label='Fade Time (ms):'>
                  <desc>Time in milliseconds used to fade the light to the desired level.</desc>
                  <value>300</value>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='0' max='4095'/>
                  </xdv:validate>
                  <xdd:notSame/>
              </field>
              <field var='OutputPercent' type='text-single' label='Output (%):'>
                  <desc>Dimmer output, in percent.</desc>
                  <value>100</value>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='0' max='100'/>
                  </xdv:validate>
                  <xdd:notSame/>
              </field>
              <field var='MainSwitch' type='boolean' label='Main switch'>
                  <desc>If the dimmer is turned on or off.</desc>
                  <value>true</value>
                  <xdd:notSame/>
              </field>
          </x>
      </getFormResponse>
   </iq>]]>
                </example>
                <p>
                    <strong>IMPORTANT:</strong> The device MUST mark all control parameters in the form as <strong>notSame</strong>, as defined in
                    <note>
                        XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                    </note>. If an end user would open the control form and press OK (submitting the form) without having entered a value, no value
                    would be written, and no action taken. If only a few parameter would be edited, only those parameters would be sent to the device
                    and only the corresponding actions taken.
                </p>
                <p>
                    All parameters in the form MUST also have validation rules defined according to <link url='http://xmpp.org/extensions/xep-0122.html'>XEP-0122</link>, 
                    specifically validation data types and ranges where appropriate. This to give type information to the client, which the client later can use to send 
                    typed control commands directly, without the need to get and send data forms to the device to control it.
                </p>
                <p>
                    Also, the device SHOULD group control parameters that should be written together using pages and sections, as described in
                    <link url='http://xmpp.org/extensions/xep-0141.html'>XEP-0141</link>. Parameters
                    MUST also be ordered in a way so that when set in that order using the typed commands, the corresponding control actions can be successfully executed.
                </p>
                <p>
                    <strong>Note:</strong> There's a difference between node parameters, as described in XEP <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators</link>,
                    and control parameters as described in this document. For more information about this, please see
                    <link url='#nodeparamsvscontrolparams'>Difference between node parameters and node control parameters</link>.
                </p>
            </section3>
            <section3 topic='Getting a control form, Failure'>
                <p>
                    A device can reject a control form request. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                    attribute of the <strong>getformResponse</strong> element, as is shown in the following example:
                </p>
                <example caption='Getting a control form, Failure'>
                    <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='dimmer@clayster.com'
       id='4'>
      <getForm xmlns='urn:xmpp:sn:control' xml:lang='en'/>
   </iq>
   
   <iq type='error'
       from='dimmer@clayster.com'
       to='master@clayster.com/amr'
       id='4'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='InsufficientPrivileges'/>
   </iq>]]>
                </example>
            </section3>
            <section3 topic='Setting a (partial) control form'>
                <p>
                    Control actions can be requested by submitting a full or partial control form back to the device. Control parameters not edited MUST not be included
                    in the form, and the device in turn MUST ONLY invoke control actions corresponding to the parameters returned in the form.
                </p>
                <p>
                    The following example shows how control actions can be requested submitting a control parameters form to the device:
                </p>
                <example caption='Setting a (partial) control form'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='dimmer@clayster.com'
       id='5'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single'>
                  <value>500</value>
              </field>
              <field var='OutputPercent' type='text-single'>
                  <value>10</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='result'
       from='dimmer@clayster.com'
       to='master@clayster.com/amr'
       id='5'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OK'/>
   </iq>]]>
                </example>
                <p>
                    In this example, the FadeTimeMilliseconds and OutputPercent control parameters are sent, while the MainSwitch control parameter is left as is. Fading is therefore
                    parformed only if the dimmer is switched on.
                </p>
            </section3>
            <section3 topic='Setting a (partial) control form, Failure'>
                <p>
                    A device can reject a control form submission. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                    attribute of the <strong>setResponse</strong> element. If there are errors in the form, details are listed using <strong>error</strong> elements in the response,
                    as is shown in the following example:
                </p>
                <example caption='Setting a (partial) control form, Failure'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='dimmer@clayster.com'
       id='6'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single'>
                  <value>500</value>
              </field>
              <field var='OutputPercent' type='text-single'>
                  <value>200</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='error'
       from='dimmer@clayster.com'
       to='master@clayster.com/amr'
       id='6'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='FormError'>
          <error var='OutputPercent'>Invalid parameter value.</error>
      </setResponse>
   </iq>]]>
                </example>
            </section3>
        </section2>
        <section2 topic='Controlling devices behind a concentrator'>
            <p>
                Controlling devices behind a concentrator can be done by specifying what device(s) to control using <strong>node</strong> elements within the
                command elements sent to the concentrator. The following sub-sections show examples of how this is done.
            </p>
            <section3 topic='Sending a control command to a node behind a concentrator'>
                <p>
                    To send a control message to a specific node behind a concentrator, the <strong>node</strong> element can be used to identify the node,
                    as is shown in the following example:
                </p>
                <example caption='Sending a control command to a node behind a concentrator'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='concentrator@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='DigitalOutput1'/>
         <boolean name='Output' value='false'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Sending a control command to multiple nodes'>
                <p>
                    The client can send the same control command to multiple nodes behind a concentrator by simply adding more <strong>node</strong> elements in the request,
                    as is shown in the following example:
                </p>
                <example caption='Sending a control command to multiple nodes'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='concentrator@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='DigitalOutput1'/>
         <node nodeId='DigitalOutput2'/>
         <node nodeId='DigitalOutput3'/>
         <node nodeId='DigitalOutput4'/>
         <boolean name='Output' value='false'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Sending a control command to multiple nodes, Failure'>
                <p>
                    By using an IQ stanza, the caller can receive an acknowledgement of the reception of the command, or error information if the command could not be processed.
                    When sending a control command to multiple nodes at a time the device must validate all parameters against all nodes before taking any control action. If
                    validation fails, an error message is returned and no control action is taken. The following example shows an example of an erroneous control message made to
                    multiple nodes on a device:
                </p>
                <example caption='Sending a control command to multiple nodes, Failure'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='concentrator@clayster.com'
       id='7'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <node nodeId='DigitalOutput1'/>
         <node nodeId='DigitalOutput2'/>
         <node nodeId='DigitalOutput3'/>
         <node nodeId='DigitalOutput4'/>
         <node nodeId='AnalogOutput1'/>
         <node nodeId='AnalogOutput2'/>
         <node nodeId='AnalogOutput3'/>
         <node nodeId='AnalogOutput4'/>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='error'
       from='concentrator@clayster.com'
       to='master@clayster.com/amr'
       id='7'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OtherError'>
          <error var='Output'>Invalid parameter type.</error>
      </setResponse>
   </iq>]]>
                </example>
            </section3>
            <section3 topic='Getting a control form from multiple nodes'>
                <p>
                    A client can get a control form containing available control parameters common between a set of nodes controlled by the concentrator. This is done 
                    adding a sequence of <strong>node</strong> elements to a <strong>getForm</strong> command sent to the concentrator, as is shown in the following example:
                </p>
                <example caption='Getting a control form'>
                    <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='concentrator@clayster.com'
       id='8'>
      <getForm xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='DigitalOutput1'/>
          <node nodeId='DigitalOutput2'/>
          <node nodeId='DigitalOutput3'/>
          <node nodeId='DigitalOutput4'/>
      </getForm>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='master@clayster.com/amr'
       id='8'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>DigitalOutput1, DigitalOutput2, ...</title>
              <xdl:page label='Output'>
                  <xdl:fieldref var='Output'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='Output' type='boolean' label='Output'>
                  <desc>If the digital output is high (checked) or low (uncheckd).</desc>
                  <value>true</value>
                  <xdd:notSame/>
              </field>
          </x>
      </getFormResponse>
   </iq>]]>
                </example>
                <p>
                    Note that only parameters that are common between the nodes defined in the request must be returned. However, all parameters must have the
                    <strong>>notSame</strong> flag set, regardless of current output status.
                </p>
            </section3>
            <section3 topic='Getting a control form from multiple nodes, Failure'>
                <p>
                    A device can reject a control form request. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                    attribute of the <strong>getformResponse</strong> element. The following example shows the device rejecting a control form request, because it does not support
                    the handling of common parameters between multiple nodes:
                </p>
                <example caption='Getting a control form from multiple nodes, Failure'>
                    <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='concentrator@clayster.com'
       id='9'>
      <getForm xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='DigitalOutput1'/>
          <node nodeId='DigitalOutput2'/>
          <node nodeId='DigitalOutput3'/>
          <node nodeId='DigitalOutput4'/>
      </getForm>
   </iq>
   
   <iq type='error'
       from='concentrator@clayster.com'
       to='master@clayster.com/amr'
       id='9'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='NotImplemented'/>
   </iq>]]>
                </example>
            </section3>
            <section3 topic='Setting a (partial) control form to multiple nodes'>
                <p>
                    You set a control form to multiple nodes controlled by a concentrator by adding <strong>node</strong> elements to the <string>set</string>
                    command sent to the concentrator, as is shown in the following example:
                </p>
                <example caption='Setting a (partial) control form to multiple nodes'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='concentrator@clayster.com'
       id='10'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='DigitalOutput1'/>
          <node nodeId='DigitalOutput2'/>
          <node nodeId='DigitalOutput3'/>
          <node nodeId='DigitalOutput4'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='Output' type='boolean'>
                  <value>true</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='master@clayster.com/amr'
       id='10'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OK'/>
   </iq>]]>
                </example>
            </section3>
            <section3 topic='Setting a (partial) control form to multiple nodes, Failure'>
                <p>
                    A device can reject a control form submission. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                    attribute of the <strong>setResponse</strong> element. The following example shows the device rejecting a control form submission because one of the control parameters,
                    even though it exists on all nodes, is not of the same type on all nodes.
                </p>
                <example caption='Setting a (partial) control form to multiple nodes'>
                    <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='concentrator@clayster.com'
       id='11'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='DigitalOutput1'/>
          <node nodeId='DigitalOutput2'/>
          <node nodeId='DigitalOutput3'/>
          <node nodeId='DigitalOutput4'/>
          <node nodeId='AnalogOutput1'/>
          <node nodeId='AnalogOutput2'/>
          <node nodeId='AnalogOutput3'/>
          <node nodeId='AnalogOutput4'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='Output' type='boolean'>
                  <value>true</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='master@clayster.com/amr'
       id='11'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='FormError'>
          <error var='Output'>Invalid type</error>
      </setResponse>
   </iq>]]>
                </example>
            </section3>
        </section2>
    </section1>
    <section1 topic='Implementation Notes' anchor='impl'>
        <section2 topic='Reading current control states'>
            <p>
                If a client wants to know the current status of control parameters, it must perform a readout of <strong>Momentary</strong> and <strong>Status</strong> values 
                from the device, according to
                <note>
                    XEP-xxxx: Sensor Data &lt;<link url='sensor-data.html'>sensor-data.html</link>&gt;
                </note>, and from the returned set of values take the current control parameter value according to the following rules, ordered by priority:
            </p>
            <ul>
                <li>
                    <p>
                        If there's a field marked as momentary value, with an unlocalized field name equal to the unlocalized control parameter name and having a compatible
                        field value type (see table below) and a status field without the missing flag set, the value of the field should be considered the current value of 
                        the control parameter.
                    </p>
                </li>
                <li>
                    <p>
                        If there's a field marked as status value, with an unlocalized field name equal to the unlocalized control parameter name and having a compatible
                        field value type (see table below) and a status field without the missing flag set, the value of the field should be considered the current value of 
                        the control parameter.
                    </p>
                </li>
            </ul>
            <p>
                Even though getting the the control form could provide the client with a quicker and easier way of retrieving control parameter values, the form is not
                guaranteed to contain correct current values. In some cases, retrieving current values might take time and only be retrieved using an asynchronous read-out
                process described in this section.
            </p>
            <p>
                The following table shows how corresponding field values should be converted to the corresponding control parameter value based on field type (x-axis) and 
                control parameter type (y-axis). N/A means conversion has no meaning and types are not compatible.
            </p>
            <table caption='Conversion of Field Value to Control Parameter Value based on types'>
                <tr>
                    <th></th>
                    <th>numeric</th>
                    <th>string</th>
                    <th>boolean</th>
                    <th>dateTime</th>
                    <th>timeSpan</th>
                    <th>enum</th>
                </tr>
                <tr>
                    <th>boolean</th>
                    <td>!=0</td>
                    <td>N/A</td>
                    <td>x</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>color</th>
                    <td>N/A</td>
                    <td>RRGGBB</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>date</th>
                    <td>N/A</td>
                    <td>(1)</td>
                    <td>N/A</td>
                    <td>Date part</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>dateTime</th>
                    <td>N/A</td>
                    <td>(2)</td>
                    <td>N/A</td>
                    <td>x</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>double</th>
                    <td>x</td>
                    <td>(3)</td>
                    <td>Z2</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>duration</th>
                    <td>N/A</td>
                    <td>(4)</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>x</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>int</th>
                    <td>x</td>
                    <td>(5)</td>
                    <td>Z2</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>long</th>
                    <td>x</td>
                    <td>(5)</td>
                    <td>Z2</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                </tr>
                <tr>
                    <th>string</th>
                    <td>(6)</td>
                    <td>x</td>
                    <td>xs:boolean</td>
                    <td>xs:dateTime</td>
                    <td>xs:duration</td>
                    <td>x</td>
                </tr>
                <tr>
                    <th>time</th>
                    <td>N/A</td>
                    <td>(7)</td>
                    <td>N/A</td>
                    <td>Time part</td>
                    <td>(8)</td>
                    <td>N/A</td>
                </tr>
            </table>
            <p>
                The following table lists notes with details on how to do conversion, if in doubt.
            </p>
            <table caption="Conversion rules">
                <tr>
                    <th>Note</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>(1)</td>
                    <td>
                        The client should try to convert the string to a date value, first according to the format specified by the XML data type xs:date, and if not possible
                        by RFC 822.
                    </td>
                </tr>
                <tr>
                    <td>(2)</td>
                    <td>
                        The client should try to convert the string to a date &amp; time value, first according to the format specified by the XML data type xs:dateTime, and if not possible
                        by RFC 822.
                    </td>
                </tr>
                <tr>
                    <td>(3)</td>
                    <td>
                        The client should try to convert the string to a double-precision floating-point value, first according to the format specified by the XML data type xs:double, 
                        and if not possible using system-local string to floating-point conversion using local decimal and throusand separator settings.
                    </td>
                </tr>
                <tr>
                    <td>(4)</td>
                    <td>
                        The client should try to convert the string to a duration value, first according to the format specified by the XML data type xs:duration,
                        and if not possible using the XML data type xs:time.
                    </td>
                </tr>
                <tr>
                    <td>(5)</td>
                    <td>The client should try to convert the string to an integer value according to the corresponding XML data type formats xs:int and xs:long.</td>
                </tr>
                <tr>
                    <td>(6)</td>
                    <td>
                        The numeric field value consists of three parts: Numeric value, number of decimals and optional unit. If no unit is provided, only the numeric value should
                        be converted to a string (compatible with the XML data type xs:double), using exactly the number of decimals provided in the field. If a unit is provided
                        (non-empty string) it must not be appended to the value, if the value is to be used for control output. For presentation purposes however, a space could be 
                        appended to the number and the unit appended after the space.    
                    </td>
                </tr>
                <tr>
                    <td>(7)</td>
                    <td>
                        The client should try to convert the string to a time value  according to the format specified by the XML data type xs:time.
                    </td>
                </tr>
                <tr>
                    <td>(8)</td>
                    <td>
                        A timeSpan field value contains a xs:duration value. The xs:duration has a larger domain than xs:time, and contains all xs:time values, but xs:time does
                        not contain all possible xs:duration values. So, conversion of an xs:duration value to an xs:time value should be performed only if a duration lies
                        between 00:00:00 and 23:59:59.
                    </td>
                </tr>
                <tr>
                    <td>x</td>
                    <td>Use the canonical conversion method.</td>
                </tr>
                <tr>
                    <td>Z2</td>
                    <td>true = 1, false = 0.</td>
                </tr>
                <tr>
                    <td>N/A</td>
                    <td>Not applicable. Conversion has no meaning. Value types are not compatible.</td>
                </tr>
                <tr>
                    <td>!=0</td>
                    <td>Nonzero = true, Zero = false.</td>
                </tr>
                <tr>
                    <td>RRGGBB</td>
                    <td>A string of six hexadecimal characters, the first two the red component of the color, the next two the green component and the last two the blue component.</td>
                </tr>
                <tr>
                    <td>Date part</td>
                    <td>Only the date part of the xs:dateTime value should be used.</td>
                </tr>
                <tr>
                    <td>Time part</td>
                    <td>Only the time part of the xs:dateTime value should be used.</td>
                </tr>
                <tr>
                    <td>xs:boolean</td>
                    <td>Conversion to a string should follow the rules specified for the XML datatype xs:boolean.</td>
                </tr>
                <tr>
                    <td>xs:dateTime</td>
                    <td>Conversion to a string should follow the rules specified for the XML datatype xs:dateTime.</td>
                </tr>
                <tr>
                    <td>xs:duration</td>
                    <td>Conversion to a string should follow the rules specified for the XML datatype xs:duration.</td>
                </tr>
            </table>
            <p>
                <strong>Note:</strong> the namespace prefix <strong>xs</strong> is here supposed to be linked with the XML Schema namespace
                <link url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</link>.
            </p>
        </section2>
        <section2 topic='Difference between node parameters and node control parameters' anchor='nodeparamsvscontrolparams'>
            <p>
                A node defined in a concentrator, as defined by <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>, supporting control has
                two sets of parameters that are different: First a set of node parameters and then a set of control parameters.
            </p>
            <p>
                Node parameters are defined by the node type in the concentrator, as described in <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>,
                and they are typically used by the concentrator to define the node and how to communicate or interact with the underlying device. The important part here is to know
                that the node parameters are maintained by the concentrator, not the underlying device.
            </p>
            <p>
                Control parameters however, are parameters that reside on the underlying device. When set, they change the actual state or behaviour of the underlying device.
                The connection to the device however, controlled by the concentrator, remains unchanged by such a control parameter update.
            </p>
        </section2>
        <section2 topic='Grouping control parameters' anchor='parametergroups'>
            <p>
                Many control actions avilable in a device can be controlled using only one control parameter. If a device only publishes such control parameters, the order
                of control paramters is not that important.
            </p>
            <p>
                However, there are many control actions that require the client to set multiple control parameters at the same time, for the device to have a complete understanding
                what the client wants to do.
            </p>
            <p>
                <link url='http://xmpp.org/extensions/xep-0141.html'>XEP-0141</link> defines a way to group parameters in a data form by including the concept of pages and sections.
                Even though these pages and sections are used for layout purposes, it should be used by devices to mark parameters that should be used together to perform control actions.
            </p>
            <p>
                The following set of rules should be adhered to, by devices as well as clients, to minimize confusion and resulting errors:
            </p>
            <ul>
                <li>
                    <p>
                        Control parameters should be listed in control forms in the order the device expects the client to write them back.
                    </p>
                </li>
                <li>
                    <p>
                        Clients should set control parameters in the order they are listed in the corresponding control forms.
                    </p>
                </li>
                <li>
                    <p>
                        Control actions that require multiple control parameters should report these together, grouped by pages or sections within pages,
                        to make clear that the parameters belong together.
                    </p>
                </li>
                <li>
                    <p>
                        For control actions requiring multiple control parameters, devices should strive to publish default values for all parameters involved. 
                        These default values should then be used by the device if a client happens to write only a subset of the control parameters required for
                        a control action. The default value could be the current state of the parameter.
                    </p>
                </li>
            </ul>
            <p>
                Note however, that one cannot always make the assumption that parameters on the same page or same section in a control form belong to the same control action.
                For instance, a PLC with 16 digital outputs might publish a control form containing a single page with 16 check boxes on (boolean parameters), that can be
                controlled individually.
            </p>
            <p>
                To solve the problem of grouping parameters together, so a client can know which parameters belong together, a new element is defined that can be used in
                data forms: <strong>parameterGroup</strong>. It is optional, but can be added to control parameters in forms, as a way to tell the client that parameters
                having the same <strong>parameterGroup</strong> belong together and should be written together. The following example illustrates this.
            </p>
            <example caption='Grouping control parameters'>
                <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='spotlight@clayster.com'
       id='12'>
      <getForm xmlns='urn:xmpp:sn:control' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='spotlight@clayster.com'
       to='master@clayster.com/amr'
       id='12'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Spotlight</title>
              <xdl:page label='Output'>
                  <xdl:fieldref var='MainSwitch'/>
              </xdl:page>
              <xdl:page label='Direction'>
                  <xdl:fieldref var='HorizontalAngle'/>
                  <xdl:fieldref var='ElevationAngle'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='MainSwitch' type='boolean' label='Main switch'>
                  <desc>If the spotlight is turned on or off.</desc>
                  <value>true</value>
                  <xdd:notSame/>
              </field>
              <field var='HorizontalAngle' type='text-single' label='Horizontal angle:'>
                  <desc>Horizontal angle of the spotlight.</desc>
                  <value>0</value>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-180' max='180'/>
                  </xdv:validate>
                  <xdd:notSame/>
                  <parameterGroup xmlns='urn:xmpp:sn:concentrators' name='direction'/>
              </field>
              <field var='ElevationAngle' type='text-single' label='Elevation angle:'>
                  <desc>Elevation angle of the spotlight.</desc>
                  <value>0</value>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-90' max='90'/>
                  </xdv:validate>
                  <xdd:notSame/>
                  <parameterGroup xmlns='urn:xmpp:sn:concentrators' name='direction'/>
              </field>
          </x>
      </getFormResponse>
   </iq>]]>
            </example>
            <p>
                The above example informs the client that the two parameters HorizontalAngle and ElevationAngle should be written together to control a control action
                (named direction).
            </p>
            <p>
                For more information about common control actions and their parameters, see <link url='xep-0000-SN-Interoperability.html'>xep-0000-SN-Interoperability.html</link>,
                which defines a set of interoperable interfaces and their abilities.
            </p>
        </section2>
        <section2 topic='Node commands vs. control parameters'>
            <p>
                Nodes behind a concentrator, as defined in <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>, have an additional means of
                publishing control interfaces: Node Commands.
            </p>
            <p>
                However, there are many differences between Node Commands and Control Parameters, as shown in the following list:
            </p>
            <ul>
                <li>
                    <p>
                        Node Commands are defined by the node type in the concentrator, and not by the device itself.
                    </p>
                </li>
                <li>
                    <p>
                        Node Commands may do many different things, not only performing control actions.
                    </p>
                </li>
                <li>
                    <p>
                        Parametrized Node Commands require the client to always get a parameter data form, and write back values. There's no way to send simple
                        control messages using Node Commands.
                    </p>
                </li>
                <li>
                    <p>
                        Node Commands can be partitioned, grouped and sorted separately.
                    </p>
                </li>
                <li>
                    <p>
                        Each Parametrized Node Command has a separate parameter form, which makes grouping of parameters normal.
                    </p>
                </li>
                <li>
                    <p>
                        Node Commands are only available for nodes controlled by a concentrator.
                    </p>
                </li>
            </ul>
            <p>
                If implementing a device with many complex control actions (like an advanced PLC), consideration should be made to divide the device into logical groups and
                implement the concentrators interface as well. Then the more complex control actions could be implemented as Node Commands instead of control actions
                as defined in this document, and implementing the simpler more intuitive control actions as described in this document.
            </p>
        </section2>
        <section2 topic='Tokens'>
            <p>
                If control interaction is performed in a context of delegated trust, as defined in the Sensor Network Provisioning XEP 
                <note>
                    XEP-xxxx: Sensor Networks - Provisioning &lt;<link url='sensor-network-provisioning.html'>sensor-network-provisioning.html</link>&gt;
                </note>, tokens should always be included in all calls. This to allow devices to check privileges with provisioning servers.
            </p>
            <p>
                The <strong>set</strong> and <strong>getForm</strong> commands support the following token attributes:
            </p>
            <ul>
                <li>
                    <strong>serviceToken</strong>
                </li>
                <li>
                    <strong>deviceToken</strong>
                </li>
                <li>
                    <strong>userToken</strong>
                </li>
            </ul>
            <p>
                For more information about provisioning, see <link url='sensor-network-provisioning.html'>sensor-network-provisioning.html</link>.
            </p>
        </section2>
        <section2 topic='Controlling devices in large subsystems'>
            <p>
                Most examples in this document have been simplified examples where a few devices containing a few control parameters have been used. However, in many cases large subsystems with
                very many actuators containing many different control actions have to be controlled, as is documented in <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>. 
                In such cases, a node may have to be specified using two or perhaps even three ID's: a <strong>sourceId</strong> identifying the data source controlling the device, a possible 
                <strong>cacheType</strong> narrowing down the search to a specific kind of node, and the common <strong>nodeId</strong>. For more information about this, see 
                <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators.html</link>.
            </p>
            <p>
                <strong>Note:</strong> For cases where the <strong>nodeId</strong> is sufficient to uniquelly identify the node, it is sufficient to provide this attribute in the request.
                If there is ambiguity in the request, the receptor must treat the request as a request with a set of nodes, all with the corresponding <strong>nodeId</strong> as requested.
            </p>
        </section2>
    </section1>
    <section1 topic='Internationalization Considerations' anchor='i18n'>
        <section2 topic='Time Zones'>
            <p>
                All timestamps and dateTime values use the XML data type xs:dateTime to specify values. These values include a date, an optional time and an optional time zone.
            </p>
            <p>
                <strong>Note:</strong> If time zone is not available, it is supposed to be undefined. The client reading the sensor that reports fields without time zone information
                should assume the sensor has the same time zone as the client, if not explicitly configured otherwise on the client side.
            </p>
            <p>
                If devices report time zone, this information should be propagated throughout the system. Otherwise, comparing timestamps from different time zones will be impossible.
            </p>
        </section2>
        <section2 topic='xml:lang'>
            <p>
                Control commands sent using IQ stanzas instead of messages, should consider using the <strong>xml:lang</strong> attribute to specify the desired language
                used (if possible) when returning information back to the caller, like error messages, localized control forms, etc.
            </p>
        </section2>
    </section1>
    <section1 topic='Security Considerations' anchor='security'>
        <p>
            Controlling devices in a large sensor network is a hackers wet dream. Therefore, consideration of how network security is implemented should not be underestimated.
            The following sections provide some general items that should be considered.
        </p>
        <section2 topic='Encryption &amp; Authentication'>
            <p>
                Consider to always use an encrypted connection with any XMPP Server used in the network. Also, make sure the server is properly authenticated and any server
                certificate properly validated.
            </p>
            <p>
                Control commands should only be accepted by trusted parties. A minimum is to make sure only authenticated and validated clients (friends) can perform control actions
                on the device.
            </p>
        </section2>
        <section2 topic='Provisioning'>
            <p>
                Consider using provisioning servers to allow for detailed control of who can do what in a sensor network. Implementing proper provisioning support decreases
                the risk for adverse effects, not only from intentional hacking, but also from unintentional errors.
            </p>
            <p>
                If using delegated trust, make sure the provisioning servers are properly authenticated and validated before trusting them.
            </p>
            <p>
                More information about provisioning can be found in <link url='sensor-network-provisioning.html'>sensor-network-provisioning.html</link>.
            </p>
        </section2>
    </section1>
    <section1 topic='IANA Considerations' anchor='iana'>
        <p>This document requires no interaction with &IANA;.</p>
    </section1>
    <section1 topic='XMPP Registrar Considerations' anchor='registrar'>
        <p>REQUIRED.</p>
        <!-- TODO -->
    </section1>
    <section1 topic='XML Schema' anchor='schema'>
        <code>
            <![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:sn:control'
    xmlns='urn:xmpp:sn:control'
    xmlns:sn='urn:xmpp:sn'
    xmlns:xd="jabber:x:data"
    xmlns:xdv="http://jabber.org/protocol/xdata-validate"
    xmlns:xdl="http://jabber.org/protocol/xdata-layout"
    elementFormDefault='qualified'>
 
    <xs:import namespace='urn:xmpp:sn'/>
    <xs:import namespace='jabber:x:data'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-validate'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-layout'/>
 
    <xs:element name='set'>
        <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='unbounded'>
                <xs:element name='node' type='NodeReference'/>
                <xs:element name='boolean' type='BooleanParameter'/>
                <xs:element name='color' type='ColorParameter'/>
                <xs:element name='date' type='DateParameter'/>
                <xs:element name='dateTime' type='DateTimeParameter'/>
                <xs:element name='double' type='DoubleParameter'/>
                <xs:element name='duration' type='DurationParameter'/>
                <xs:element name='int' type='IntParameter'/>
                <xs:element name='long' type='LongParameter'/>
                <xs:element name='string' type='StringParameter'/>
                <xs:element name='time' type='TimeParameter'/>
                <xs:element name='form'>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:any minOccurs="1" maxOccurs="1" namespace="jabber:x:data"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
            <xs:attributeGroup ref='tokens'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='setResponse'>
        <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='unbounded'>
                <xs:element name='node' type='NodeReference'/>
                <xs:element name='parameter'>
                    <xs:complexType>
                        <xs:attribute name='name' type='xs:string' use='required'/>
                    </xs:complexType>
                </xs:element>
                <xs:element name='error' type='ParameterError'/>
            </xs:choice>
            <xs:attributeGroup ref='responseCode'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='getForm'>
        <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'>
                <xs:element name='node' type='NodeReference'/>
            </xs:sequence>
            <xs:attributeGroup ref='tokens'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='getFormResponse'>
        <xs:complexType>
            <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="1" namespace="jabber:x:data"/>
            </xs:sequence>
            <xs:attributeGroup ref='responseCode'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='parameterGroup'>
        <xs:complexType>
            <xs:attribute name='name' type='xs:string' use='required'/>
        </xs:complexType>
    </xs:element>
 
    <xs:attributeGroup name='nodeReference'>
        <xs:attribute name='nodeId' type='xs:string' use='required'/>
        <xs:attribute name='sourceId' type='xs:string' use='optional'/>
        <xs:attribute name='cacheType' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:attributeGroup name='tokens'>
        <xs:attribute name='serviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='deviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='userToken' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:attributeGroup name='responseCode'>
        <xs:attribute name='result' type='ResponseCode' use='required'/>
    </xs:attributeGroup>
 
    <xs:complexType name='Parameter' abstract='true'>
        <xs:attribute name='name' type='xs:string' use='required'/>
    </xs:complexType>
 
    <xs:complexType name='BooleanParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:boolean' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='ColorParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='Color' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DateParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:date' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DateTimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:dateTime' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DoubleParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:double' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DurationParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:duration' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='IntParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:int' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='LongParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:long' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='StringParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:string' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='TimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:time' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='ParameterError'>
        <xs:simpleContent>
            <xs:extension base='xs:string'>
                <xs:attribute name='var' type='xs:string' use='required'/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
 
    <xs:complexType name='NodeReference'>
        <xs:attributeGroup ref='nodeReference'/>
    </xs:complexType>
 
    <xs:simpleType name='Color'>
        <xs:restriction base='xs:string'>
            <xs:pattern value='^[0-9a-fA-F]{6}$'/>
        </xs:restriction>
    </xs:simpleType>
 
    <xs:simpleType name='ResponseCode'>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='OK'/>
            <xs:enumeration value='NotFound'/>
            <xs:enumeration value='InsufficientPrivileges'/>
            <xs:enumeration value='Locked'/>
            <xs:enumeration value='NotImplemented'/>
            <xs:enumeration value='FormError'/>
            <xs:enumeration value='OtherError'/>
        </xs:restriction>
    </xs:simpleType>
 
</xs:schema>]]>
        </code>
    </section1>
    <section1 topic='Acknowledgements' anchor='ack'>
        <p>Thanks to Joachim Lindborg for all valuable feedback.</p>
    </section1>
</xep>
