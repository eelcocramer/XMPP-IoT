<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
    <!ENTITY % ents SYSTEM 'xep.ent'>
    %ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
    <header>
        <title>Sensor Networks - Control</title>
        <abstract>This specification describes how to control devices or actuators in an XMPP-based sensor network.</abstract>
        <legal>
            <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2013 by the XMPP Standards Foundation (XSF).</copyright>
            <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
            <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
            <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
            <conformance>
                This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://www.xmpp.org/extensions/ipr-policy.shtml'>http://www.xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).
            </conformance>
        </legal>
        <number>xxxx</number>
        <status>ProtoXEP</status>
        <type>Standards Track</type>
        <sig>Standards</sig>
        <approver>Council</approver>
        <dependencies>
            <spec>XEP-0001</spec>
            <spec>XEP-0004</spec>
            <spec>XEP-0030</spec>
            <spec>XEP-0122</spec>
            <spec>XEP-0137</spec>
            <spec>XEP-0141</spec>
            <spec>sensor-data</spec>
            <spec>sensor-network-provisioning</spec>
            <spec>xep-0000-DynamicForms</spec>
            <spec>xep-0000-ColorParameter</spec>
        </dependencies>
        <supersedes/>
        <supersededby/>
        <shortname>NOT_YET_ASSIGNED</shortname>
        <author>
            <firstname>Peter</firstname>
            <surname>Waher</surname>
            <email>peter.waher@clayster.com</email>
            <jid>peter.waher@jabber.org</jid>
            <uri>http://se.linkedin.com/pub/peter-waher/1a/71b/a29/</uri>
        </author>
        <revision>
            <version>0.0.1</version>
            <date>2013-03-27</date>
            <initials>pwa</initials>
            <remark>
                <p>First draft.</p>
            </remark>
        </revision>
    </header>
    <section1 topic='Introduction' anchor='intro'>
        <p>
            Actuators are devices in sensor networks that can be controlled through the network and act with the outside world. In sensor networks and Internet of Things applications,
            actuators make it possible to automate real-world processes. This document defines a mechanism whereby actuators can be controlled in XMPP-based sensor networks, making it
            possible to integrate sensors and actuators of different brands, makes and models into larger Internet of Things applications.
        </p>
        <p>
            Note has to be taken, that these XEP's are designed for implementation in sensors, many of which have very limited amount of memory (both RAM and ROM) or resources (processing power).
            Therefore, simplicity is of utmost importance. Furthermore, sensor networks can become huge, easily with millions of devices in peer-to-peer networks.
        </p>
        <p>
            Sensor networks contains many different architectures and use cases. For this reason, the sensor network standards have been divided into multiple XEPs according to the following table:
        </p>
        <table caption='Sensor Network XEPs'>
            <tr>
                <th>XEP</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>XEP-0000-ColorParameter</td>
                <td>Defines extensions for how color parameters can be handled, based on &xep0004;</td>
            </tr>
            <tr>
                <td>XEP-0000-DynamicForms</td>
                <td>Defines extensions for how dynamic forms can be created, based on &xep0004;, &xep0122;, &xep0137; and &xep0141;.</td>
            </tr>
            <tr>
                <td>exi</td>
                <td>
                    Defines how to EXI can be used in XMPP to achieve efficient compression of data. Albeit not a sensor network specific XEP, this XEP should be considered
                    in all sensor network implementations where memory and packet size is an issue.
                </td>
            </tr>
            <tr>
                <td>xep-0000-SN-BatteryPoweredSensors</td>
                <td>Defines how to handle the peculiars related to battery powered devices, and other devices intermittently available on the network.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Concentrators</td>
                <td>Defines how to handle architectures containing concentrators or servers handling multiple sensors.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Control</td>
                <td>This specification. Defines how to control actuators and other devices in sensor networks.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Discovery</td>
                <td>Defines the peculiars of sensor discovery in sensor networks. Apart from discovering sensors by JID, it also defines how to discover sensors based on location, etc.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Events</td>
                <td>Defines how sensors send events, how event subscription, hysteresis levels, etc., are configured.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Interoperability</td>
                <td>Defines guidelines for how to achieve interoperability in sensor networks, publishing interoperability interfaces for different types of devices.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Multicast</td>
                <td>Defines how sensor data can be multicast in efficient ways.</td>
            </tr>
            <tr>
                <td>sensor-network-provisioning</td>
                <td>Defines how provisioning, the management of access privileges, etc., can be efficiently and easily implemented.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-PubSub</td>
                <td>Defines how efficient publication of sensor data can be made in sensor networks.</td>
            </tr>
            <tr>
                <td>sensor-data</td>
                <td>
                    Provides the underlying architecture, basic operations and data structures for sensor data communication over XMPP networks.
                    It includes a hardware abstraction model, removing any technical detail implemented in underlying technologies. This XEP is used by all other sensor network XEPs.
                </td>
            </tr>
        </table>
    </section1>
    <section1 topic='Glossary' anchor='glossary'>
        <p>The following table lists common terms and corresponding descriptions.</p>
        <dl>
            <di>
                <dt>Actuator</dt>
                <dd>Device containing at least one configurable property or output that can and should be controlled by some other entity or device.</dd>
            </di>
            <di>
                <dt>Computed Value</dt>
                <dd>A value that is computed instead of measured.</dd>
            </di>
            <di>
                <dt>Concentrator</dt>
                <dd>Device managing a set of devices which it publishes on the XMPP network.</dd>
            </di>
            <di>
                <dt>Field</dt>
                <dd>
                    One item of sensor data. Contains information about: Node, Field Name, Value, Precision, Unit, Value Type, Status, Timestamp, Localization information, etc.
                    Fields should be unique within the triple (Node ID, Field Name, Timestamp).
                </dd>
            </di>
            <di>
                <dt>Field Name</dt>
                <dd>Name of a field of sensor data. Examples: Energy, Volume, Flow, Power, etc.</dd>
            </di>
            <di>
                <dt>Field Type</dt>
                <dd>What type of value the field represents. Examples: Momentary Value, Status Value, Identification Value, Calculated Value, Peak Value, Historical Value, etc.</dd>
            </di>
            <di>
                <dt>Historical Value</dt>
                <dd>A value stored in memory from a previous timestamp.</dd>
            </di>
            <di>
                <dt>Identification Value</dt>
                <dd>A value that can be used for identification. (Serial numbers, meter IDs, locations, names, etc.)</dd>
            </di>
            <di>
                <dt>Localization information</dt>
                <dd>Optional information for a field, allowing the sensor to control how the information should be presented to human viewers.</dd>
            </di>
            <di>
                <dt>Meter</dt>
                <dd>A device possible containing multiple sensors, used in metering applications. Examples: Electricity meter, Water Meter, Heat Meter, Cooling Meter, etc.</dd>
            </di>
            <di>
                <dt>Momentary Value</dt>
                <dd>A momentary value represents a value measured at the time of the read-out.</dd>
            </di>
            <di>
                <dt>Node</dt>
                <dd>
                    Graphs contain nodes and edges between nodes. In Sensor Networks, sensors, actuators, meters, devices, gatewats, etc., are often depicted as nodes and links between sensors (friendships)
                    are depicted as edges. In abstract terms, it's easier to talk about a Node, than have to list different types of nodes possible (sensors, actuators, meters, devices, gateways, etc.).
                    Each Node has a Node ID.
                </dd>
            </di>
            <di>
                <dt>Node ID</dt>
                <dd>
                    An ID uniquelly identifying a node within its corresponding context. If a globally unique ID is desired, an architechture should be used using a universally accepted
                    ID scheme.
                </dd>
            </di>
            <di>
                <dt>Parameter</dt>
                <dd>
                    Readable and/or writable property on a node/device. The XEP xep-0000-SN-Concentrators deals with reading and writing parameters
                    on nodes/devices. Fields are not parameters, and parameters are not fields.
                </dd>
            </di>
            <di>
                <dt>Peak Value</dt>
                <dd>A maximum or minimum value during a given period.</dd>
            </di>
            <di>
                <dt>Precision</dt>
                <dd>
                    In physics, precision determines the number of digits of precision. In sensor networks however, this definition is not easily applicable. Instead, precision
                    determines, for example, the number of decimals of precision, or power of precision. Example: 123.200 MWh contains 3 decimals of precision. All entities parsing and
                    delivering field information in sensor networks should always retain the number of decimals in a message.
                </dd>
            </di>
            <di>
                <dt>Sensor</dt>
                <dd>
                    Device measuring at least one digital value (0 or 1) or analog value (value with precision and physical unit). Examples: Temperature sensor, pressure sensor, etc.
                    Sensor values are reported as fields during read-out. Each sensor has a unique Node ID.
                </dd>
            </di>
            <di>
                <dt>SN</dt>
                <dd>Sensor Network. A network consisting, but not limited to sensors, where transport and use of sensor data is of primary concern. A sensor network may contain actuators, network applications, monitors, services, etc.</dd>
            </di>
            <di>
                <dt>Status Value</dt>
                <dd>A value displaying status information about something.</dd>
            </di>
            <di>
                <dt>Timestamp</dt>
                <dd>Timestamp of value, when the value was sampled or recorded.</dd>
            </di>
            <di>
                <dt>Token</dt>
                <dd>
                    A client, device or user can get a token from a provisioning server. These tokens can be included in requeests to other entities in the network, so these entities can validate
                    access rights with the provisioning server.
                </dd>
            </di>
            <di>
                <dt>Unit</dt>
                <dd>Physical unit of value. Example: MWh, l/s, etc.</dd>
            </di>
            <di>
                <dt>Value</dt>
                <dd>A field value.</dd>
            </di>
            <di>
                <dt>Value Status</dt>
                <dd>Status of field value. Contains important status information for Quality of Service purposes. Examples: Ok, Error, Warning, Time Shifted, Missing, Signed, etc.</dd>
            </di>
            <di>
                <dt>Value Type</dt>
                <dd>Can be numeric, string, boolean, Date &amp; Time, Time Span or Enumeration.</dd>
            </di>
            <di>
                <dt>WSN</dt>
                <dd>Wireless Sensor Network, a sensor network including wireless devices.</dd>
            </di>
            <di>
                <dt>XMPP Client</dt>
                <dd>Application connected to an XMPP network, having a JID. Note that sensors, as well as applications requesting sensor data can be XMPP clients.</dd>
            </di>
        </dl>
    </section1>
    <section1 topic='Use Cases' anchor='usecases'>
        <p>
            Control in sensor networks is about setting output values. To make the implementation simple, it is assumed that control of a device can be made using a single message.
            If only a simple set operation is requested, a &lt;message&gt; stanza can be sent. If an acknowledgement (ACK) of the operation (or Not-acknowledgement NACK) of the operation
            is desired, an &lt;iq&gt; stanza can be used instead.
        </p>
        <p>
            To set control parameters in a device, the <strong>set</strong> command is sent to the device. The set command allows for two different ways of setting control parameters:
        </p>
        <ul>
            <li>Using strongly typed parameters. This way performs best in EXI compression and automation.</li>
            <li>Using a weakly typed data form. This might be better for manually setting control parameters, since it allows the device to give the user a better user interface explaining
            available control parameters.</li>
        </ul>
        <p>
            What type of control parameters there are available in different types of devices is described in
            <note>
                XEP-xxxx: Sensor Networks - Interoperability &lt;<link url='xep-0000-SN-Interoperability.html'>xep-0000-SN-Interoperability.html</link>&gt;
            </note>.
        </p>
        <section2 topic='Sending a control command using a message stanza'>
            <p>
                Following is an example of a control command sent using a message stanza:
            </p>
            <example caption='Message stanza for setting a value'>
                <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='DigitalOutput1'/>
         <boolean name='Output' value='true'/>
      </set>
   </message>]]>
            </example>
            <p>
                Note that any response is supressed when sending a message stanza, regardless if the desired control command could be executed or not. The following example shows how the same
                control command could be issued using an IQ stanza instead:
            </p>
        </section2>
        <section2 topic='Sending a control command using an IQ stanza'>
            <p>
                Following is an example of a control command sent using an iq stanza:
            </p>
            <example caption='IQ stanza for setting a value'>
                <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='1'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <node nodeId='DigitalOutput1'/>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='result'
       from='device@clayster.com'
       to='master@clayster.com/amr'
       id='1'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OK'/>
   </iq>]]>
            </example>
            <p>
                In the following use cases, often a message stanza will be used to illustrate the point. However, the same operation could equally well be used using an iq stanza instead.
            </p>
        </section2>
        <section2 topic='Control failure response'>
            <p>
                By using an IQ stanza, the caller can receive an acknowledgement of the reception of the command, or error information if the command could not be processed.
                Following is an example of a control command sent using an iq stanza, where the receiver reports an error back to the caller:
            </p>
            <example caption='Control failure response'>
                <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='2'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <node nodeId='AnalogOutput1'/>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='error'
       from='device@clayster.com'
       to='master@clayster.com/amr'
       id='2'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OtherError'>
          <error var='Output'>Invalid parameter type.</error>
      </setResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Setting single values'>
            <p>
                The following sub-sections illustrate how to set parameters of different types in a device.
            </p>
            <section3 topic='Setting a single boolean-valued control parameter'>
                <p>
                    Setting single boolean-valued control parameters is a common use case, for instance when controlling digital outputs. The following example shows how a boolean value
                    can be set in a device.
                </p>
                <example caption='Setting a single boolean-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='DigitalOutput1'/>
         <boolean name='Output' value='true'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single 32-bit integer-valued control parameter'>
                <p>
                    Setting single integer-valued control parameters is a common use case, for instance when controlling analog outputs. The following example shows how a 32-bit integer value
                    can be set in a device.
                </p>
                <example caption='Setting a single 32-bit integer-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='AnalogOutput1'/>
         <int name='Output' value='50000'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single 64-bit integer-valued control parameter'>
                <p>
                    Setting single integer-valued control parameters is a common use case, for instance when controlling analog outputs. Even though 32-bit integers may cover most control needs,
                    it might in some cases be limiting. Therefore, a 64-bit control parameters can be created. The following example shows how a 64-bit integer value
                    can be set in a device.
                </p>
                <example caption='Setting a single 64-bit integer-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='MegaPrecisionAnalogOutput1'/>
         <long name='Output' value='500000000000000'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single string-valued control parameter'>
                <p>
                    Setting single string-valued control parameters is a common use case, for instance when controlling text displays. The following example shows how a string value
                    can be set in a device.
                </p>
                <example caption='Setting a single string-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='TextDisplay'/>
         <string name='Row1' value='Temperature: 21.4 °C'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single double-valued control parameter'>
                <p>
                    Setting single double-valued control parameters can be an alternative form of controlling analog outputs for instance. The following example shows how a double value
                    can be set in a device.
                </p>
                <example caption='Setting a single double-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='AnalogOutput2'/>
         <double name='4-20mA' value='8.192'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single date &amp; time-valued control parameter'>
                <p>
                    Setting date &amp; time-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a date &amp; time value can be set in a device.
                </p>
                <example caption='Setting a single date &amp; time-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='Alarm'/>
         <dateTime name='Alarm Time' value='2013-04-02T08:00:00'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single time-valued control parameter'>
                <p>
                    Setting time-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a time value can be set in a device.
                </p>
                <example caption='Setting a single time-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='Alarm'/>
         <time name='Alarm Time' value='08:00:00'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single duration-valued control parameter'>
                <p>
                    Setting duration-valued control parameters might be necessary when timing is an issue. Often it forms part of a larger context.
                    The following example shows how a duration value can be set in a device.
                </p>
                <example caption='Setting a single duration-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='Alarm'/>
         <duration name='Alarm Duration' value='PT3M30S'/>
      </set>
   </message>]]>
                </example>
            </section3>
            <section3 topic='Setting a single color-valued control parameter'>
                <p>
                    Setting single color values in a device can occur in instances where color or lighting is important. Sometimes color is set using enumerations (string-valued 
                    or integer-valued parameters), and sometimes as a color property. The following example shows how a color value can be set in a device.
                </p>
                <example caption='Setting a single color-valued control parameter'>
                    <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='SpotLight'/>
         <color name='Color' value='3399FF'/>
      </set>
   </message>]]>
                </example>
            </section3>
        </section2>
        <section2 topic='Setting multiple control parameters at once'>
            <p>
                Often, setting a single control parameter is not sufficient for a control action. In these cases, setting multiple control parameters at once is necessary.
                The <strong>set</strong> command makes this easy however, since it allows for any number of control parameters to be set at once, as the following example shows:
            </p>
            <example caption='Setting multiple control parameters at once'>
                <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='Dimmer'/>
         <int name='FadeTimeMilliseconds' value='500'/>
         <int name='OutputPercent' value='10'/>
      </set>
   </message>]]>
            </example>
            <p>
                Sometimes the order of control parameters are important in the device, and sometimes the parameters form part of a whole. It depends on the context of the device.
                In the above example, the order is important. When the OutputPercent control parameter is set, it will start to fade in or out to the desired setting (10%), using the
                fade time set previously. If the FadeTimeMilliseconds control parameter would have been set after the OutputPercent parameter, the fading would have been started using
                the previous setting, which might be unknown.
            </p>
            <p>
                The order of control parameters to use depends on the device. The <link url='#controlform'>Control Form</link> lists available control parameters of the device in the
                order they are expected to be sent to the device. The XEP <link url='xep-0000-SN-Interoperability.html'>xep-0000-SN-Interoperability</link> details what control parameters 
                must be available for different interfaces, and if the order of control parameters is important.
            </p>
        </section2>
        <section2 topic='Getting a control form' anchor='controlform'>
            <p>
                A client can get a control form containing available control parameters of the device. This is done using the <strong>getForm</strong> command,
                as is shown in the following example:
            </p>
            <example caption='Getting a control form'>
                <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='3'>
      <getForm xmlns='urn:xmpp:sn:control' nodeId='Dimmer' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='device@clayster.com'
       to='master@clayster.com/amr'
       id='3'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Dimmer</title>
              <xdl:page label='Output'>
                  <xdl:fieldref var='FaceTimeMilliseconds'/>
                  <xdl:fieldref var='OutputPercent'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single' label='Fade Time (ms):'>
                  <desc>Time in milliseconds used to fade the light to the desired level.</desc>
                  <value>300</value>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='0' max='4095'/>
                  </xdv:validate>
                  <xdd:notSame/>
              </field>
              <field var='OutputPercent' type='text-single' label='Output (%):'>
                  <desc>Dimmer output, in percent.</desc>
                  <value>100</value>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='0' max='100'/>
                  </xdv:validate>
                  <xdd:notSame/>
              </field>
              <field var='MainSwitch' type='boolean' label='Main switch'>
                  <desc>If the dimmer is turned on or off.</desc>
                  <value>true</value>
                  <xdd:notSame/>
              </field>
          </x>
      </getFormResponse>
   </iq>]]>
            </example>
            <p>
                <strong>IMPORTANT:</strong> The device MUST mark all control parameters in the form as <strong>notSame</strong>, as defined in
                <note>
                    XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                </note>. If an end user would open the control form and press OK (submitting the form) without having entered a value, no value
                would be written, and no action taken. If only a few parameter woule be edited, only those parameters would be sent to the device
                and only the corresponding actions taken.
            </p>
            <p>
                All parameters in the form MUST also have validation rules defined according to XEP-0122, specifically validation data types and ranges
                where appropriate. This to give type information to the client, which the client later can use to send typed control commands directly, 
                without the need to get and send data forms to the device to control it.
            </p>
            <p>
                Also, the device SHOULD group control parameters that should be written together using pages and sections, as described in XEP-0141. Parameters
                MUST also be ordered in a way so that when set in that order using the typed commands, the corresponding control actions can be successfully executed.
            </p>
            <p>
                <strong>Note:</strong> There's a difference between node parameters, as described in XEP <link url='xep-0000-SN-Concentrators.html'>xep-0000-SN-Concentrators</link>, 
                and control parameters as described in this document. For more information about this, please see 
                <link url='#nodeparamsvscontrolparams'>Difference between node parameters and node control parameters</link>.
            </p>
        </section2>
        <section2 topic='Getting a control form, Failure'>
            <p>
                A device can reject a control form request. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                attribute of the <strong>getformResponse</strong> element, as is shown in the following example:
            </p>
            <example caption='Getting a control form, Failure'>
                <![CDATA[
   <iq type='get'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='4'>
      <getForm xmlns='urn:xmpp:sn:control' nodeId='Dimmer' xml:lang='en'/>
   </iq>
   
   <iq type='error'
       from='device@clayster.com'
       to='master@clayster.com/amr'
       id='4'>
      <getFormResponse xmlns='urn:xmpp:sn:concentrators' result='InsufficientPrivileges'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Setting a (partial) control form'>
            <p>
                Control actions can be requested by submitting a full or partial control form back to the device. Control parameters not edited MUST not be included
                in the form, and the device in turn MUST ONLY invoke control actions corresponding to the parameters returned in the form.
            </p>
            <p>
                The following example shows how control actions can be requested submitting a control parameters form to the device:
            </p>
            <example caption='Setting a (partial) control form'>
                <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='5'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='Dimmer'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single'>
                  <value>500</value>
              </field>
              <field var='OutputPercent' type='text-single'>
                  <value>10</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com/client'
       id='5'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OK'/>
   </iq>]]>
            </example>
            <p>
                In this example, the FadeTimeMilliseconds and OutputPercent control parameters are sent, while the MainSwitch control parameter is left as is. Fading is therefore
                parformed only if the dimmer is switched on.
            </p>
        </section2>
        <section2 topic='Setting a (partial) control form, Failure'>
            <p>
                A device can reject a control form submission. It does this returning an <strong>error</strong> iq stanza, and detailing the error in the <strong>result</strong>
                attribute of the <strong>setResponse</strong> element. If there are errors in the form, details are listed using <strong>error</strong> elements in the response, 
                as is shown in the following example:
            </p>
            <example caption='Setting a (partial) control form, Failure'>
                <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='6'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
          <node nodeId='Dimmer'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>325ED0F3-9A9A-45A4-9634-4E0D41C5EA06</value>
              </field>
              <field var='FadeTimeMilliseconds' type='text-single'>
                  <value>500</value>
              </field>
              <field var='OutputPercent' type='text-single'>
                  <value>200</value>
              </field>
          </x>
      </set>
   </iq>
   
   <iq type='error'
       from='concentrator@clayster.com'
       to='client@clayster.com/client'
       id='6'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='FormError'>
          <error var='OutputPercent'>Invalid parameter value.</error>
      </setResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Sending a control command to multiple nodes'>
            <p>
                The client can send the same control command to multiple nodes by simply adding more <strong>node</strong> elements in the request,
                as is shown in the following example:
            </p>
            <example caption='Sending a control command to multiple nodes'>
                <![CDATA[
   <message from='master@clayster.com/amr'
            to='device@clayster.com'>
      <set xmlns='urn:xmpp:sn:control'>
         <node nodeId='DigitalOutput1'/>
         <node nodeId='DigitalOutput2'/>
         <node nodeId='DigitalOutput3'/>
         <node nodeId='DigitalOutput4'/>
         <boolean name='Output' value='false'/>
      </set>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Sending a control command to multiple nodes, Failure'>
            <p>
                By using an IQ stanza, the caller can receive an acknowledgement of the reception of the command, or error information if the command could not be processed.
                When sending a control command to multiple nodes at a time the device must validate all parameters against all nodes before taking any control action. If
                validation fails, an error message is returned and no control action is taken. The following example shows an example of an erroneous control message made to 
                multiple nodes on a device:
            </p>
            <example caption='Sending a control command to multiple nodes, Failure'>
                <![CDATA[
   <iq type='set'
       from='master@clayster.com/amr'
       to='device@clayster.com'
       id='7'>
      <set xmlns='urn:xmpp:sn:control' xml:lang='en'>
         <node nodeId='DigitalOutput1'/>
         <node nodeId='DigitalOutput2'/>
         <node nodeId='DigitalOutput3'/>
         <node nodeId='DigitalOutput4'/>
         <node nodeId='AnalogOutput1'/>
         <node nodeId='AnalogOutput2'/>
         <node nodeId='AnalogOutput3'/>
         <node nodeId='AnalogOutput4'/>
         <boolean name='Output' value='true'/>
      </set>
   </iq>
   
   <iq type='error'
       from='device@clayster.com'
       to='master@clayster.com/amr'
       id='7'>
      <setResponse xmlns='urn:xmpp:sn:control' responseCode='OtherError'>
          <error var='Output'>Invalid parameter type.</error>
      </setResponse>
   </iq>]]>
            </example>
        </section2>
    </section1>
    <section1 topic='Implementation Notes' anchor='impl'>
        <section2 topic='Reading current control states'>
            <!-- TODO -->
        </section2>
        <section2 topic='Difference between node parameters and node control parameters' anchor='nodeparamsvscontrolparams'>
            <!-- TODO -->
        </section2>
        <section2 topic='Regarding pages and sections in control forms'>
            <!-- TODO -->
        </section2>
        <section2 topic='Node commands vs. control parameters'>
            <!-- TODO -->
        </section2>
        <section2 topic='Tokens'>
            <!-- TODO -->
        </section2>
        <section2 topic='Data Sources &amp; Cache Types'>
            <!-- TODO -->
        </section2>
        <!-- TODO: When written, complete provisioning XEP -->
        <!-- TODO: Restricting access to Configurable parameters per node and contact-->
    </section1>
    <section1 topic='Accessibility Considerations' anchor='access'>
        <p>OPTIONAL.</p>
    </section1>
    <section1 topic='Internationalization Considerations' anchor='i18n'>
        <p>OPTIONAL.</p>
        <!-- TODO: xml:lang if using IQ instead of message, since error messages can be localized. -->
    </section1>
    <section1 topic='Security Considerations' anchor='security'>
        <p>REQUIRED.</p>
    </section1>
    <section1 topic='IANA Considerations' anchor='iana'>
        <p>REQUIRED.</p>
    </section1>
    <section1 topic='XMPP Registrar Considerations' anchor='registrar'>
        <p>REQUIRED.</p>
    </section1>
    <section1 topic='XML Schema' anchor='schema'>
        <code>
            <![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:sn:control'
    xmlns='urn:xmpp:sn:control'
    xmlns:sn='urn:xmpp:sn'
    xmlns:xd="jabber:x:data"
    xmlns:xdv="http://jabber.org/protocol/xdata-validate"
    xmlns:xdl="http://jabber.org/protocol/xdata-layout"
    elementFormDefault='qualified'>
 
    <xs:import namespace='urn:xmpp:sn'/>
    <xs:import namespace='jabber:x:data'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-validate'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-layout'/>
 
    <xs:element name='set'>
        <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='unbounded'>
                <xs:element name='node'>
                    <xs:complexType>
                        <xs:attributeGroup ref='nodeReference'/>
                    </xs:complexType>
                </xs:element>
                <xs:element name='boolean' type='BooleanParameter'/>
                <xs:element name='color' type='ColorParameter'/>
                <xs:element name='dateTime' type='DateTimeParameter'/>
                <xs:element name='double' type='DoubleParameter'/>
                <xs:element name='duration' type='DurationParameter'/>
                <xs:element name='int' type='IntParameter'/>
                <xs:element name='long' type='LongParameter'/>
                <xs:element name='string' type='StringParameter'/>
                <xs:element name='time' type='TimeParameter'/>
                <xs:element name='form'>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:any minOccurs="1" maxOccurs="1" namespace="jabber:x:data"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
            <xs:attributeGroup ref='tokens'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='setResponse'>
        <xs:complexType>
            <xs:choice minOccurs='1' maxOccurs='1'>
                <xs:element name='error' type='ParameterError' minOccurs='1' maxOccurs='unbounded'/>
            </xs:choice>
            <xs:attributeGroup ref='responseCode'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='getForm'>
        <xs:complexType>
            <xs:attributeGroup ref='nodeReference'/>
            <xs:attributeGroup ref='tokens'/>
        </xs:complexType>
    </xs:element>
 
    <xs:element name='getFormResponse'>
        <xs:complexType>
            <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="1" namespace="jabber:x:data"/>
            </xs:sequence>
            <xs:attributeGroup ref='responseCode'/>
        </xs:complexType>
    </xs:element>
 
    <xs:attributeGroup name='nodeReference'>
        <xs:attribute name='nodeId' type='xs:string' use='required'/>
        <xs:attribute name='sourceId' type='xs:string' use='optional'/>
        <xs:attribute name='cacheType' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:attributeGroup name='tokens'>
        <xs:attribute name='serviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='deviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='userToken' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:attributeGroup name='responseCode'>
        <xs:attribute name='result' type='ResponseCode' use='required'/>
    </xs:attributeGroup>
 
    <xs:complexType name='Parameter' abstract='true'>
        <xs:attribute name='name' type='xs:string' use='required'/>
    </xs:complexType>
 
    <xs:complexType name='BooleanParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:boolean' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='ColorParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='Color' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DateTimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:dateTime' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DoubleParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:double' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DurationParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:duration' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='IntParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:int' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='LongParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:long' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='StringParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:string' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='TimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:time' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='ParameterError'>
        <xs:simpleContent>
            <xs:extension base='xs:string'>
                <xs:attribute name='var' type='xs:string' use='required'/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
 
    <xs:simpleType name='Color'>
        <xs:restriction base='xs:string'>
            <xs:pattern value='^[0-9a-fA-F]{6}$'/>
        </xs:restriction>
    </xs:simpleType>
 
    <xs:simpleType name='ResponseCode'>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='OK'/>
            <xs:enumeration value='NotFound'/>
            <xs:enumeration value='InsufficientPrivileges'/>
            <xs:enumeration value='Locked'/>
            <xs:enumeration value='FormError'/>
            <xs:enumeration value='OtherError'/>
        </xs:restriction>
    </xs:simpleType>
 
</xs:schema>]]>
        </code>
    </section1>
</xep>
