<?xml version='1.0' encoding='UTF-8'?>
<!-- TODO: required data sources, optional data sources -->
<!-- TODO: enhanced concentrator GUI XEP. (Icons, overlays, etc.) -->
<!-- TODO: Interaction with provisioning server -->
<!-- TODO: Error message when command is not supported -->
<!-- TODO: Refresh capabilities command -->
<!DOCTYPE xep SYSTEM 'xep.dtd' [
    <!ENTITY % ents SYSTEM 'xep.ent'>
    %ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
    <header>
        <title>XEP - Sensor Networks - Concentrators</title>
        <abstract>This specification describes how to manage and get information from concentrators of devices over XMPP networks.</abstract>
        <legal>
            <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2013 by the XMPP Standards Foundation (XSF).</copyright>
            <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
            <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
            <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
            <conformance>
                This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://www.xmpp.org/extensions/ipr-policy.shtml'>http://www.xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).
            </conformance>
        </legal>
        <number>xxxx</number>
        <status>ProtoXEP</status>
        <type>Standards Track</type>
        <sig>Standards</sig>
        <approver>Council</approver>
        <dependencies>
            <spec>XMPP Core</spec>
            <spec>XEP-0001</spec>
            <spec>XEP-0004</spec>
            <spec>XEP-0030</spec>
            <spec>XEP-0122</spec>
            <spec>XEP-0137</spec>
            <spec>XEP-0141</spec>
            <spec>xep-0000-SN-SensorData</spec>
            <spec>xep-0000-SN-Provisioning</spec>
            <spec>xep-0000-DynamicForms</spec>
        </dependencies>
        <supersedes/>
        <supersededby/>
        <shortname>NOT_YET_ASSIGNED</shortname>
        <author>
            <firstname>Peter</firstname>
            <surname>Waher</surname>
            <email>peter.waher@clayster.com</email>
            <jid>peter.waher@jabber.org</jid>
            <uri>http://se.linkedin.com/pub/peter-waher/1a/71b/a29/</uri>
        </author>
        <revision>
            <version>0.0.1</version>
            <date>2013-03-20</date>
            <initials>pwa</initials>
            <remark>
                <p>First draft.</p>
            </remark>
        </revision>
    </header>
    <section1 topic='Introduction' anchor='intro'>
        <p>
            Concentrators are devices in sensor networks, concentrating the management of a sub set of devices to one point. They can be small (for example: PLC:s managing a small
            set of sensors and actuators), medium-sized (for example: mid-level concentrators, controlling branches of the network, islands, perhaps using separate comunication protocols),
            large (for example: entire sub-systems, perhaps managed by a separate child/partner organisation) to massive (for example: The entire top-level system, smart-grid, IoT network).
        </p>
        <p>
            Even though this XEP is generally written and can be used by other implementations not based on sensor networks, much of the requirements used to define this specification
            comes from requirements used in sensor networks and Internet of Things applications and infrastructure.
        </p>
        <p>
            This specification will define the following aspects of a general concentrator profile, that can handle all different types of concentrators available in sensor network architectures:
        </p>
        <ul>
            <li>
                A concentrator works with multiple <strong>data sources</strong>. Effective management of data sources and their contents is a vital part of this XEP.
            </li>
            <li>The ability to work with massive quantities of entities.</li>
            <li>Effective synchronization of contents between interested parties.</li>
            <li>Effective ways to interact with entities controlled by the concentrator.</li>
        </ul>
        <p>
            Even though there are technologies available in forms of XEPs that solve parts of the above mentioned problem, they do not provide sufficient support. The following paragraphs will
            take the time to list why different technologies are not applicable.
        </p>
        <p>
            This XEP defines tree structures for nodes in different data sources. &xep0060; defines a model where a tree structure of nodes is published and users can browse this
            tree structure. Furthermore, it allows the possibility to publish items on these nodes as well as syndicalization of this information.
        </p>
        <p>
            This XEP also defines data sources (in a tree structure). These data sources contain nodes. &xep0248; defines a structure called a node collection, a structure that 
            allows the creation of collections containing loosly coupled nodes.
        </p>
        <p>
            Even though this document defines tree structures of data, it is not however based on XEP-0060. There are multiple reasons for this:
        </p>
        <ul>
            <li>
                The structures defined in this specification do not include items to publish for each node.
            </li>
            <li>
                We want to be able to use XEP-0060 in parallell to this specification, for the purpose of publishing sensor data.
                More information about this is found in <link url='xep-0000-SN-PubSub.html'>xep-0000-SN-PubSub.html</link>.
            </li>
            <li>
                For massive systems (hundreds of thousands, or millions, of nodes behind a concentrator, its vitally important to be able to manage sets of nodes directly 
                (for example: Edit multiple nodes at once). Many of the operations in XEP-0060 only allow for operations of singular nodes. Furthermore, many simple operations 
                require multiple messages per node. This document defines way to operate of sets of nodes simultaneously, as well as ways to perform operations with a smaller 
                number of operations.
            </li>
            <li>
                In this document, nodes have specific functions, controlled by a specific Node Type. Different Node Types have different parameter sets, different options, commands, 
                capabilities, etc. XEP-0060 does not differ between node types. There, nodes are only a structural way to sort data into a tree graph.
            </li>
            <li>
                In this document, nodes have real-time status, like errors, warnings, etc.
            </li>
        </ul>
        <p>
            XEP-0248 defines the concept of node collections and syndicalization of information from nodes in these collections. But XEP-0248 is not used in this specification.
            There are multiple reasons:
        </p>
        <ul>
            <li>
                We want to be able to use XEP-0248 in parallell to this specification, for the purpose of publishing sensor data.
                More information about this is found in <link url='xep-0000-SN-PubSub.html'>xep-0000-SN-PubSub.html</link>.
            </li>
            <li>
                Node IDs are not necessarily unique by themselves in the system. This document defines a uniqueness concept based on a triple of data: (Data Source ID, Cache Type, Node ID). This
                means that Nodes must have IDs unique within a given Cache Type, within a given data source.
            </li>
            <li>
                We need to expand on types of events generated from a data source, to make them adhere to the particulars of nodes as defined in this specification.
            </li>
            <li>
                Data sources own their nodes. XEP-0248 define a loosly coupled structure with references to nodes. In this document, a data source is the owner of all nodes
                contained in it.
            </li>
        </ul>
        <p>
            &xep0050; defines how ad-hoc commands can be implemented and how clients can use such commands to interact with underlying logic. But XEP-0050 is not used in this specification.
            There are multiple reasons:
        </p>
        <ul>
            <li>
                We want to be able to use XEP-0050 for other types of commands, than commands defined in this specification. Generally, XEP-0050 is used to implement
                system-wide commands.
            </li>
            <li>
                Commands defined in this specification are context sensitive, i.e. they depend on the type of node and the context of the node on which the act.
            </li>
            <li>
                It is a requirement to be able to execute commands on sets of nodes directly.
            </li>
            <li>
                Since commands have to be context sensitive, a large concentrator system may have hundreds or thousands of different commands, making it impossible to create
                context sensitive GUI's using XEP-0050.
            </li>
            <li>
                Dialog types used for Ad-Hoc-commands are not sufficient. First, dynamic dialogs are required in the general case. 
                (XEP <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link> define how to create dynamic forms.) Further more, the
                wizard style type of dialogs used for more complex dialogs in ad-hoc commands, are difficult to automate.
            </li>
        </ul>

        <p>
            Sensor networks contains many different architectures and use cases. For this reason, the sensor network standards have been divided into multiple XEPs according to the following table:
        </p>

        <table caption='Sensor Network XEPs'>
            <tr>
                <th>XEP</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>XEP-0000-DynamicForms</td>
                <td>Defines extensions for how dynamic forms can be created, based on &xep0004;, &xep0122;, &xep0137; and &xep0141;.</td>
            </tr>
            <tr>
                <td>XEP-0000-Exi</td>
                <td>
                    Defines how to EXI can be used in XMPP to achieve efficient compression of data. Albeit not a sensor network specific XEP, this XEP should be considered
                    in all sensor network implementations where memory and packet size is an issue.
                </td>
            </tr>
            <tr>
                <td>xep-0000-SN-BatteryPoweredSensors</td>
                <td>Defines how to handle the peculiars related to battery powered devices, and other devices intermittently available on the network.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Concentrators</td>
                <td>This specification. Defines how to handle architectures containing concentrators or servers handling multiple sensors.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Control</td>
                <td>Defines how to control actuators and other devices in sensor networks.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Discovery</td>
                <td>Defines the peculiars of sensor discovery in sensor networks. Apart from discovering sensors by JID, it also defines how to discover sensors based on location, etc.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Events</td>
                <td>Defines how sensors send events, how event subscription, hysteresis levels, etc., are configured.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Interoperability</td>
                <td>Defines guidelines for how to achieve interoperability in sensor networks, publishing interoperability interfaces for different types of devices.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Multicast</td>
                <td>Defines how sensor data can be multicast in efficient ways.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-Provisioning</td>
                <td>Defines how provisioning, the management of access privileges, etc., can be efficiently and easily implemented.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-PubSub</td>
                <td>Defines how efficient publication of sensor data can be made in sensor networks.</td>
            </tr>
            <tr>
                <td>xep-0000-SN-SensorData</td>
                <td>
                    Provides the underlying architecture, basic operations and data structures for sensor data communication over XMPP networks.
                    It includes a hardware abstraction model, removing any technical detail implemented in underlying technologies. This XEP is used by all other sensor network XEPs.
                </td>
            </tr>
        </table>
    </section1>
    <section1 topic='Glossary' anchor='glossary'>
        <p>The following table lists common terms and corresponding descriptions.</p>
        <table caption='Glossary'>
            <tr>
                <th>Term</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>Actuator</td>
                <td>Device containing at least one configurable property or output that can and should be controlled by some other entity or device.</td>
            </tr>
            <tr>
                <td>Cache Type</td>
                <td>Node IDs are unique within a given cache type (and data source id). Examples of cache types may be: Sensor nodes, streets, buildings, groupings, etc.</td>
            </tr>
            <tr>
                <td>Computed Value</td>
                <td>A value that is computed instead of measured.</td>
            </tr>
            <tr>
                <td>Concentrator</td>
                <td>Device managing a set of devices which it publishes on the XMPP network.</td>
            </tr>
            <tr>
                <td>Data Source</td>
                <td>A Data source contains a collection of nodes. Three types of data sources exist: Singular, Flat and Tree. Singular data sources only include one object.
                Flat data sources contain a list of objects and Tree data sources contain nodes formed as a tree graph with one root element.</td>
            </tr>
            <tr>
                <td>Field</td>
                <td>
                    One item of sensor data. Contains information about: Node, Field Name, Value, Precision, Unit, Value Type, Status, Timestamp, Localization information, etc.
                    Fields should be unique within the triple (Node ID, Field Name, Timestamp).
                </td>
            </tr>
            <tr>
                <td>Field Name</td>
                <td>Name of a field of sensor data. Examples: Energy, Volume, Flow, Power, etc.</td>
            </tr>
            <tr>
                <td>Field Type</td>
                <td>What type of value the field represents. Examples: Momentary Value, Status Value, Identification Value, Calculated Value, Peak Value, Historical Value, etc.</td>
            </tr>
            <tr>
                <td>Historical Value</td>
                <td>A value stored in memory from a previous timestamp.</td>
            </tr>
            <tr>
                <td>Identification Value</td>
                <td>A value that can be used for identification. (Serial numbers, meter IDs, locations, names, etc.)</td>
            </tr>
            <tr>
                <td>Localization information</td>
                <td>Optional information for a field, allowing the sensor to control how the information should be presented to human viewers.</td>
            </tr>
            <tr>
                <td>Meter</td>
                <td>A device possible containing multiple sensors, used in metering applications. Examples: Electricity meter, Water Meter, Heat Meter, Cooling Meter, etc.</td>
            </tr>
            <tr>
                <td>Momentary Value</td>
                <td>A momentary value represents a value measured at the time of the read-out.</td>
            </tr>
            <tr>
                <td>Node</td>
                <td>
                    Graphs contain nodes and edges between nodes. In Sensor Networks, sensors, actuators, meters, devices, gateways, etc., are often depicted as nodes and links between sensors (friendships)
                    are depicted as edges. In abstract terms, it's easier to talk about a Node, than have to list different types of nodes possible (sensors, actuators, meters, devices, gateways, etc.).
                    Each Node has a Node ID. Nodes belong to a data source, and all nodes have a Node Type. Some nodes have a parent node, and some nodes have child nodes. Nodes with the same 
                    parent nodes a called sibling nodes.
                </td>
            </tr>
            <tr>
                <td>Node ID</td>
                <td>
                    An ID uniquely identifying a node within its corresponding context. If a globally unique ID is desired, an architecture should be used using a universally accepted
                    ID scheme.
                </td>
            </tr>
            <tr>
                <td>Node Type</td>
                <td>Each node has a Node Type. The Node Type defines the funcionality of the node in the system.</td>
            </tr>
            <tr>
                <td>Parameter</td>
                <td>
                    Readable and/or writable property on a node/device. The XEP xep-0000-SN-Concentrators deals with reading and writing parameters
                    on nodes/devices. Fields are not parameters, and parameters are not fields.
                </td>
            </tr>
            <tr>
                <td>Peak Value</td>
                <td>A maximum or minimum value during a given period.</td>
            </tr>
            <tr>
                <td>Precision</td>
                <td>
                    In physics, precision determines the number of digits of precision. In sensor networks however, this definition is not easily applicable. Instead, precision
                    determines, for example, the number of decimals of precision, or power of precision. Example: 123.200 MWh contains 3 decimals of precision. All entities parsing and
                    delivering field information in sensor networks should always retain the number of decimals in a message.
                </td>
            </tr>
            <tr>
                <td>Sensor</td>
                <td>
                    Device measuring at least one digital value (0 or 1) or analog value (value with precision and physical unit). Examples: Temperature sensor, pressure sensor, etc.
                    Sensor values are reported as fields during read-out. Each sensor has a unique Node ID.
                </td>
            </tr>
            <tr>
                <td>SN</td>
                <td>Sensor Network. A network consisting, but not limited to sensors, where transport and use of sensor data is of primary concern. A sensor network may contain actuators, network applications, monitors, services, etc.</td>
            </tr>
            <tr>
                <td>Status Value</td>
                <td>A value displaying status information about something.</td>
            </tr>
            <tr>
                <td>Timestamp</td>
                <td>Timestamp of value, when the value was sampled or recorded.</td>
            </tr>
            <tr>
                <td>Token</td>
                <td>
                    A client, device or user can get a token from a provisioning server. These tokens can be included in requeests to other entities in the network, so these entities can validate
                    access rights with the provisioning server.
                </td>
            </tr>
            <tr>
                <td>Unit</td>
                <td>Physical unit of value. Example: MWh, l/s, etc.</td>
            </tr>
            <tr>
                <td>Value</td>
                <td>A field value.</td>
            </tr>
            <tr>
                <td>Value Status</td>
                <td>Status of field value. Contains important status information for Quality of Service purposes. Examples: Ok, Error, Warning, Time Shifted, Missing, Signed, etc.</td>
            </tr>
            <tr>
                <td>Value Type</td>
                <td>Can be numeric, string, boolean, Date &amp; Time, Time Span or Enumeration.</td>
            </tr>
            <tr>
                <td>WSN</td>
                <td>Wireless Sensor Network, a sensor network including wireless devices.</td>
            </tr>
            <tr>
                <td>XMPP Client</td>
                <td>Application connected to an XMPP network, having a JID. Note that sensors, as well as applications requesting sensor data can be XMPP clients.</td>
            </tr>
        </table>
    </section1>
    <section1 topic='Use Cases' anchor='usecases'>
        <p>
            To create a complete set of operations supported by all types of concentrators, ranging from PLCs to subsystems to entire systems is very difficult. So, the aim
            of this document is instead to create a very small reduced set of operations, a common denominator, that would allow for basic maintenance and interoperability of 
            concentrators of different makes and models and of these varying ranges.
        </p>
        <section2 topic='Get Capabilities'>
            <p>
                This document lists a sequence of commands. Some are very basic, while others are used for managing massive amounts of devices. When developing a small PLC, it might
                be difficult to motivate the implementation of the more advanced commands. They are simply not necessary for the management of the device. So, clients connecting to 
                the concentrator need a way to learn what operations are available in the concentrator, and as a consequence what operations are not. To do this, the
                <strong>getCapabilities</strong> command is sent, as is shown in the following example.
            </p>
            <example caption='Full capabilities'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='subsystem@clayster.com'
       id='1'>
      <getCapabilities xmlns='urn:xmpp:sn:concentrators'/>
   </iq>
   
   <iq type='result'
       from='subsystem@clayster.com'
       to='client@clayster.com'
       id='1'>
      <getCapabilitiesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <value>getCapabilities</value>
          <value>getAllDataSources</value>
          <value>getTopDataSources</value>
          <value>getChildDataSources</value>
          <value>containsNode</value>
          <value>containsNodes</value>
          <value>getNode</value>
          <value>getNodes</value>
          <value>getAllNodes</value>
          <value>getRootNodes</value>
          <value>getChildNodes</value>
          <value>getIndices</value>
          <value>getNodeFromIndex</value>
          <value>getNodesFromIndex</value>
          <value>getAllNodesFromIndex</value>
          <value>getNodeParameters</value>
          <value>getCommonNodeParameters</value>
          <value>getNodeParameterNames</value>
          <value>getNodeParameterValues</value>
          <value>setNodeParameterValues</value>
          <value>getNodeStatus</value>
          <value>getAddableNodeTypes</value>
          <value>getParametersForNewNode</value>
          <value>createNewNode</value>
          <value>destroyNode</value>
          <value>getAncestors</value>
          <value>getNodeCommands</value>
          <value>getCommonNodeCommands</value>
          <value>getCommandParameters</value>
          <value>getCommonCommandParameters</value>
          <value>moveUp</value>
          <value>moveDown</value>
      </getCapabilitiesResponse>
   </iq>]]>
            </example>
            <p>
                A smaller gateway on the other hand, may have skipped the implementation of the batch commands that are used for larger systems:
            </p>
            <!-- TODO: No data storage -->
            <example caption='No batch command capabilities'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='gateway@clayster.com'
       id='2'>
      <getCapabilities xmlns='urn:xmpp:sn:concentrators'/>
   </iq>
   
   <iq type='result'
       from='gateway@clayster.com'
       to='client@clayster.com'
       id='2'>
      <getCapabilitiesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <value>getCapabilities</value>
          <value>getAllDataSources</value>
          <value>getTopDataSources</value>
          <value>getChildDataSources</value>
          <value>containsNode</value>
          <value>getNode</value>
          <value>getRootNodes</value>
          <value>getChildNodes</value>
          <value>getNodeParameters</value>
          <value>getNodeStatus</value>
          <value>getAddableNodeTypes</value>
          <value>getParametersForNewNode</value>
          <value>createNewNode</value>
          <value>destroyNode</value>
          <value>getAncestors</value>
          <value>getNodeCommands</value>
          <value>getCommandParameters</value>
          <value>moveUp</value>
          <value>moveDown</value>
      </getCapabilitiesResponse>
   </iq>]]>
            </example>
            <p>
                But a small PLC, possibly with a fixed set of nodes, might have support for an even more reduced set of commands:
            </p>
            <example caption='No edit capabilities'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='plc@clayster.com'
       id='3'>
      <getCapabilities xmlns='urn:xmpp:sn:concentrators'/>
   </iq>
   
   <iq type='result'
       from='plc@clayster.com'
       to='client@clayster.com'
       id='3'>
      <getCapabilitiesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <value>getCapabilities</value>
          <value>getAllDataSources</value>
          <value>getNode</value>
          <value>getRootNodes</value>
          <value>getChildNodes</value>
          <value>getNodeParameters</value>
          <value>getNodeStatus</value>
          <value>getNodeCommands</value>
          <value>getCommandParameters</value>
      </getCapabilitiesResponse>
   </iq>]]>
            </example>
            <p>
                So, clients who need to interact with different types of concentrators need to be aware of what commands are supported, and limit operations to thos commands.
            </p>
        </section2>
        <section2 topic='Get All Data Sources'>
            <p>
                This command will return a flat list of all available data sources on the concentrator. It is not structured hierarchically.
            </p>
            <example caption='Get All Data Sources'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='4'>
      <getAllDataSources xmlns='urn:xmpp:sn:concentrators' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='4'>
      <getAllDataSourcesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <dataSource id='Applications' name='Applications' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='Certificates' name='Certificates' hasChildren='false' lastChanged='2013-02-20T12:31:54'/>
          <dataSource id='Clayster.EventSink.Programmable' name='Programmable Event Log' hasChildren='false' lastChanged='2012-10-25T09:31:12'/>
          ...
      </getAllDataSourcesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Top Data Sources'>
            <p>
                If the client is interested in the hierarchical structure of available data sources, it should request only the root sources, and then ask the client for their
                corresponding child data sources. If the client wants to present the data sources to a user, presenting them in their hierarchical order may be more intuitive.
            </p>
            <example caption='Get Top Data Sources'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='5'>
      <getTopDataSources xmlns='urn:xmpp:sn:concentrators' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='5'>
      <getTopDataSourcesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <dataSource id='MeteringRoot' name='Metering' hasChildren='true' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='SecurityRoot' name='Security' hasChildren='true' lastChanged='2013-01-12T22:03:50'/>
          <dataSource id='SystemRoot' name='System' hasChildren='true' lastChanged='2012-02-20T12:34:56'/>
          ...
      </getAllDataSourcesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Child Data Sources'>
            <p>
                Having the ID of a data source that contains child data sources, you can fetch the child sources as follows:
            </p>
            <example caption='Get Child Data Sources'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='6'>
      <getChildDataSources xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringRoot' xml:lang='en' lastChanged='2013-03-19T17:58:01'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='6'>
      <getChildDataSourcesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <dataSource id='MeteringFieldImports' name='Field Imports' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringFieldProcessors' name='Field Processors' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringFieldSinks' name='Field Sinks' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringGroups' name='Groups' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringJobs' name='Jobs' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringTopology' name='Topology' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
          <dataSource id='MeteringUnitConversion' name='Unit Conversion' hasChildren='false' lastChanged='2013-03-19T17:58:01'/>
      </getChildDataSourcesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Contains Node'>
            <p>
                This command permits the client to check the existance of a node on the concetrator.
            </p>
            <example caption='Checking the existance of a node'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='7'>
      <containsNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='7'>
      <containsNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>true</containsNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Contains Nodes'>
            <p>
                If the client wants to check the existance of multiple nodes on the concentrator, it can use this batch command instead:
            </p>
            <example caption='Checking the existance of a multiple nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='8'>
      <containsNodes xmlns='urn:xmpp:sn:concentrators'>
         <node sourceId='MeteringTopology' nodeId='Node1'/>
         <node sourceId='MeteringTopology' nodeId='Node2'/>
         <node sourceId='MeteringTopology' nodeId='Node3'/>
         <node sourceId='MeteringGroups' nodeId='Group1'/>
      </containsNodes>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='8'>
      <containsNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
         <value>true</value>
         <value>true</value>
         <value>false</value>
         <value>true</value>
      </containsNodeResponse>
   </iq>]]>
            </example>
            <p>
                The array returned will have one item for each item in the request, in the same order.
            </p>
        </section2>
        <section2 topic='Get Node'>
            <p>
                This command returns basic information about a node in the concentrator.
            </p>
            <example caption='Get Node'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='9'>
      <getNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='9'>
      <getNodeResponse xmlns='urn:xmpp:sn:concentrators' 
                       result='OK'
                       id='Node1' 
                       nodeType='Namespace.NodeType1' 
                       cacheType='Node' 
                       state='WarningUnsigned' 
                       hasChildren='false'
                       isReadable='true' 
                       isConfigurable='true' 
                       hasCommands='true' 
                       parentId='Root' 
                       lastChanged='2013-03-19T17:58:01'/>
   </iq>]]>
            </example>
            <p>
                For more information, see <link url='#nodeinfo'>Node Information</link>.
            </p>
        </section2>
        <section2 topic='Get Nodes'>
            <p>
                This commands lets the client get information from multiple nodes at once.
            </p>
            <example caption='Get Nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='10'>
      <getNodes xmlns='urn:xmpp:sn:concentrators'>
          <node sourceId='MeteringTopology' nodeId='Node1'/>
          <node sourceId='MeteringTopology' nodeId='Node2'/>
          <node sourceId='MeteringTopology' nodeId='Node3'/>
      </getNodes>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='10'>
      <getNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'/>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'/>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'/>
      </getNodesResponse>
   </iq>]]>
            </example>
            <p>
                For more information, see <link url='#nodeinfo'>Node Information</link>.
            </p>
        </section2>
        <section2 topic='Get Node with parameters'>
            <p>
                This command returns basic information about a node in the concentrator, but also adds properties for the node.
            </p>
            <example caption='Get Node with parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='11'>
      <getNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' xml:lang='en' parameters='true'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='11'>
      <getNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK' id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' 
                       hasChildren='false' isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
          <string id='id' name='Node ID' value='Node1'/>
          <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
          <string id='sn' name='Serial Number' value='123456'/>
          <string id='class' name='Node Class' value='Temperature'/>
          <string id='meterLoc' name='Meter Location' value='P123502-2'/>
          <int id='addr' name='Address' value='123'/>
          <double id='lat' name='Latitude' value='12.345'/>
          <double id='long' name='Longitude' value='123.45'/>
      </getNodeResponse>
   </iq>]]>
            </example>
            <p>
                For more information, see <link url='#nodeinfo'>Node Information</link>.
            </p>
        </section2>
        <section2 topic='Get Nodes with parameters'>
            <p>
                This commands lets the client get information from multiple nodes at once, including node properties.
            </p>
            <example caption='Get Nodes with parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='12'>
      <getNodes xmlns='urn:xmpp:sn:concentrators' parameters='true' xml:lang='true'>
          <node sourceId='MeteringTopology' nodeId='Node1'/>
          <node sourceId='MeteringTopology' nodeId='Node2'/>
          <node sourceId='MeteringTopology' nodeId='Node3'/>
      </getNodes>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='12'>
      <getNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Watchamacallit Pressure Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='234567'/>
              <string id='class' name='Node Class' value='Pressure'/>
              <string id='meterLoc' name='Meter Location' value='P668632-6'/>
              <int id='addr' name='Address' value='124'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' isReadable='true' 
                isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Watchamacallit Electricity Meter v1.2'/>
              <string id='sn' name='Serial Number' value='345678'/>
              <string id='class' name='Node Class' value='Electricity'/>
              <string id='meterLoc' name='Meter Location' value='P332367-9'/>
              <int id='addr' name='Address' value='125'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </getNodesResponse>
   </iq>]]>
            </example>
            <p>
                For more information, see <link url='#nodeinfo'>Node Information</link>.
            </p>
        </section2>
        <section2 topic='Get All Nodes'>
            <p>
                If the device does not manage too many nodes, it could choose to implement this function. It would return all all available nodes with one call.
            </p>
            <example caption='Get All Nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='13'>
      <getAllNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='13'>
      <getAllNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
          <node id='Root' nodeType='Namespace.Root' cacheType='Node' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true'/>
      </getNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get All Nodes with Parameters'>
            <p>
                If the device does not manage too many nodes, it could choose to implement this function. It would return all all available nodes with their parameters with one call.
            </p>
            <example caption='Get All Nodes with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='14'>
      <getAllNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' parameters='true' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='14'>
      <getAllNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Watchamacallit Pressure Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='234567'/>
              <string id='class' name='Node Class' value='Pressure'/>
              <string id='meterLoc' name='Meter Location' value='P668632-6'/>
              <int id='addr' name='Address' value='124'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Watchamacallit Electricity Meter v1.2'/>
              <string id='sn' name='Serial Number' value='345678'/>
              <string id='class' name='Node Class' value='Electricity'/>
              <string id='meterLoc' name='Meter Location' value='P332367-9'/>
              <int id='addr' name='Address' value='125'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Root' nodeType='Namespace.Root' cacheType='Node' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true'>
              <string id='id' name='Node ID' value='Root'/>
              <string id='type' name='Node Type' value='Root Node'/>
          </node>
      </getNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get All Nodes derived from'>
            <p>
                This command assumes node types exist in a class hierarchy, and allows the caller to retrieve nodes with similar inheritance. 
            </p>
            <example caption='Get All Nodes derived from'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='15'>
      <getAllNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology'>
          <onlyIfDerivedFrom>Namespace.BaseClass1</onlyIfDerivedFrom>
      </getAllNodes>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='15'>
      <getAllNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
      </getNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get All Nodes derived from, with Parameters'>
            <p>
                This command assumes node types exist in a class hierarchy, and allows the caller to retrieve nodes with similar inheritance. It also returns node parameters
                directly in the response.
            </p>
            <example caption='Get All Nodes derived from, with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='16'>
      <getAllNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' parameters='true' xml:lang='en'>
          <onlyIfDerivedFrom>Namespace.BaseClass1</onlyIfDerivedFrom>
      </getAllNodes>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='16'>
      <getAllNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Watchamacallit Electricity Meter v1.2'/>
              <string id='sn' name='Serial Number' value='345678'/>
              <string id='class' name='Node Class' value='Electricity'/>
              <string id='meterLoc' name='Meter Location' value='P332367-9'/>
              <int id='addr' name='Address' value='125'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </getNodeResponse>
   </iq>]]>
            </example>
            <p>
                Note that the caller can list multiple classes in the request. This would return only nodes having the correct base class(es) and 
                implementing all interfaces.
            </p>
        </section2>
        <section2 topic='Get node inheritence'>
            <p>
                This command assumes node types exist in a class hierarchy. It allows the caller to get a list of the node class hierarchy and implemented interfaces the
                node has.
            </p>
            <example caption='Get node inheritence'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='17'>
      <getNodeInheritence xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='17'>
      <getNodeInheritenceResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <baseClasses>
              <value>Namespace.BaseClass1</value>
              <value>Namespace.AbstractBase</value>
          </baseClasses>
      </getNodeInheritenceResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Root Nodes'>
            <p>
                This commands returns the root node of a data source (in case the source is a tree-shaped data source) or the root nodes of a data source (in case the
                source is flat).
            </p>
            <example caption='Get Root Nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='18'>
      <getRootNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' />
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='18'>
      <getRootNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
      </getRootNodesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Root Nodes with Parameters'>
            <p>
                This commands returns the root node of a data source (in case the source is a tree-shaped data source) or the root nodes of a data source (in case the
                source is flat), and also returns the parameters for the corresponding nodes.
            </p>
            <example caption='Get Root Nodes with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='19'>
      <getRootNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' parameters='true' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='19'>
      <getRootNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </getRootNodesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Child Nodes'>
            <p>
                This commands returns the child nodes of a node in a data source.
            </p>
            <example caption='Get Child Nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='20'>
      <getChildNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' />
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='20'>
      <getChildNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'/>
      </getRootNodesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Child Nodes with Parameters'>
            <p>
                This commands returns the child nodes of a node in a data source, and also returns the parameters for the corresponding nodes.
            </p>
            <example caption='Get Child Nodes with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='21'>
      <getChildNodes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' parameters='true' xml:lang='en' />
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='21'>
      <getChildNodesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Watchamacallit Pressure Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='234567'/>
              <string id='class' name='Node Class' value='Pressure'/>
              <string id='meterLoc' name='Meter Location' value='P668632-6'/>
              <int id='addr' name='Address' value='124'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Watchamacallit Electricity Meter v1.2'/>
              <string id='sn' name='Serial Number' value='345678'/>
              <string id='class' name='Node Class' value='Electricity'/>
              <string id='meterLoc' name='Meter Location' value='P332367-9'/>
              <int id='addr' name='Address' value='125'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </getRootNodesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get indices of Data Source'>
            <p>
                This commands returns a list of available indices in a data source. Indices can be used for efficient node look-up.
            </p>
            <example caption='Get Child Nodes with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='22'>
      <getIndices xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' />
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='22'>
      <getIndicesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <value>country</value>
          <value>region</value>
          <value>city</value>
          <value>area</value>
          <value>street</value>
          <value>building</value>
          <value>apartment</value>
          <value>oid</value>
      </getIndicesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Nodes from index'>
            <p>
                This command can be used to get a node or nodes from a data source using an index and an index value. 
            </p>
            <example caption='Get Nodes from index'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='23'>
      <getNodesFromIndex xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' index='apartment' indexValue='A1-1' />
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='23'>
      <getNodesFromIndexResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-1'/>
      </getNodesFromIndexResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Nodes from index with Parameters'>
            <p>
                This command can be used to get a node or nodes from a data source using an index and an index value, and also returns the parameters for the corresponding nodes.
            </p>
            <example caption='Get Nodes from index with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='24'>
      <getNodesFromIndex xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' index='apartment' indexValue='A1-1' 
                         parameters='true' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='24'>
      <getNodesFromIndexResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-1'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Metering Topology Reference'/>
              <string id='referenceId' name='Reference ID' value='Node2'/>
          </node>
      </getNodesFromIndexResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Nodes from indices'>
            <p>
                This command can be used to get nodes from a set of data source using indices and index values.
            </p>
            <example caption='Get Nodes from indices'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='25'>
      <getNodesFromIndices xmlns='urn:xmpp:sn:concentrators'>
          <indexRef sourceId='MeteringGroups' index='apartment' indexValue='A1-1'/>
          <indexRef sourceId='MeteringGroups' index='apartment' indexValue='A1-2'/>
      </getNodesFromIndices>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='25'>
      <getNodesFromIndicesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-1'/>
          <node id='Node3' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-2'/>
      </getNodesFromIndicesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Nodes from indices with Parameters'>
            <p>
                This command can be used to get nodes from a set of data source using indices and index values, and also returns the parameters for the corresponding nodes.
            </p>
            <example caption='Get Nodes from indices with Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='26'>
      <getNodesFromIndices xmlns='urn:xmpp:sn:concentrators' parameters='true' xml:lang='en'>
          <indexRef sourceId='MeteringGroups' index='apartment' indexValue='A1-1'/>
          <indexRef sourceId='MeteringGroups' index='apartment' indexValue='A1-2'/>
      </getNodesFromIndices>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='26'>
      <getNodesFromIndicesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-1'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Metering Topology Reference'/>
              <string id='referenceId' name='Reference ID' value='Node2'/>
          </node>
          <node id='Node3' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-2'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Metering Topology Reference'/>
              <string id='referenceId' name='Reference ID' value='Node3'/>
          </node>
      </getNodesFromIndicesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get All Index Values'>
            <p>
                This command can be used to get a list of available index values, given a data source and an index.
            </p>
            <example caption='Get All Index Values'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='27'>
      <getAllIndexValues xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' index='apartment'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='27'>
      <getAllIndexValuesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <value>A1-1</value>
          <value>A1-2</value>
          ...
      </getAllIndexValuesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Node Parameters for editing'>
            <p>
                Previously described commands can return parameters for a node. But these parameters are for presentational or informational use. If the client wants to edit
                the parameters of a node, another set of commands must be used. This use case shows how <strong>getNodeParametersForEdit</strong> can be used to edit available
                parameters for one node.
            </p>
            <p>
                <strong>Note:</strong> When editing parameters for a node, a different set of parameters might be returned compared to the set of parameters available in commands
                mentioned above. There may be various resons for this, among other things (but not limited to) user rights, node settings, and parameter type. User rights may restrict the number
                of parameters the user can access. The node may be configured not to allow editing of certain parameters. Also, some types of parameters may only be available in
                an edit mode (like long multi-line parameters) and not in a shorter presentation mode.
            </p>
            <example caption='Get Node Parameters for editing'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='28'>
      <getNodeParametersForEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='28'>
      <getNodeParametersForEditResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Node1</title>
              <xdl:page label='Identity'>
                  <xdl:fieldref var='id'/>
                  <xdl:fieldref var='type'/>
                  <xdl:fieldref var='class'/>
                  <xdl:fieldref var='sn'/>
              </xdl:page>
              <xdl:page label='Location'>
                  <xdl:fieldref var='meterLoc'/>
                  <xdl:fieldref var='lat'/>
                  <xdl:fieldref var='long'/>
              </xdl:page>
              <xdl:page label='Communication'>
                  <xdl:fieldref var='addr'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='id' type='text-single' label='Node ID:'>
                  <desc>ID of the node.</desc>
                  <required/>
                  <value>Node1</value>
              </field>
              <field var='type' type='text-single' label='Node Type:'>
                  <desc>Type of node.</desc>
                  <value>Watchamacallit Temperature Sensor v1.2</value>
                  <xdd:readOnly/>
              </field>
              <field var='class' type='list-single' label='Node Class:'>
                  <desc>Class of node</desc>
                  <value>Temperature</value>
                  <option label='Cooling'><value>Cooling</value></option>
                  <option label='Electricity'><value>Electricity</value></option>
                  <option label='Heating'><value>Heating</value></option>
                  <option label='Pressure'><value>Pressure</value></option>
                  <option label='Temperature'><value>Temperature</value></option>
                  <option label='Water'><value>Water</value></option>
                  ...
              </field>
              <field var='sn' type='text-single' label='Serial Number:'>
                  <desc>Serial number of node/device.</desc>
                  <value>123456</value>
              </field>
              <field var='meterLoc' type='text-single' label='Meter Location:'>
                  <desc>Meter Location.</desc>
                  <value>P123502-2</value>
              </field>
              <field var='addr' type='text-single' label='Address:'>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='1' max='250'/>
                  </xdv:validate>
                  <desc>Bus address</desc>
                  <value>123</value>
              </field>
              <field var='lat' type='text-single' label='Latitude:'>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-90' max='90'/>
                  </xdv:validate>
                  <desc>Latitude of node.</desc>
                  <value>12.345</value>
              </field>
              <field var='long' type='text-single' label='Longitude:'>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-180' max='180'/>
                  </xdv:validate>
                  <desc>Longitude of node.</desc>
                  <value>123.45</value>
              </field>
          </x>
      </getNodeParametersForEditResponse>
   </iq>]]>
            </example>
            <p>
                The following table lists the different XEP's the client should implement to be able to support parameter forms according to this proposal:
            </p>
            <table caption='Form XEPs'>
                <tr>
                    <th>XEP</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>XEP-0004</td>
                    <td>Describes how basic forms are handled.</td>
                </tr>
                <tr>
                    <td>XEP-0122</td>
                    <td>Makes it possible to add certain client validation rules to form parameters.</td>
                </tr>
                <tr>
                    <td>XEP-0137</td>
                    <td>Makes it possible to publish a file upload parameter.</td>
                </tr>
                <tr>
                    <td>XEP-0141</td>
                    <td>Makes it possible to layout parameters into pages and sections.</td>
                </tr>
                <tr>
                    <td>XEP-0141</td>
                    <td>Makes it possible to layout parameters into pages and sections.</td>
                </tr>
                <tr>
                    <td>xep-0000-DynamicForms</td>
                    <td>Makes it possible to create dynamic forms, with server-side validation and forms that change dynamically depending on input.</td>
                </tr>
                <!-- TODO: Add XEP for color parameter.-->
            </table>
            <p>
                Read-only parameters will be returned with the <strong>readOnly</strong> element, as defined in <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>.
                Clients SHOULD support this extension if using this command. However, the server MUST NOT change parameters in a node that are read-only, even if clients happen
                to try to set them.
            </p>
        </section2>
        <section2 topic='Set Node Parameters after editing'>
            <p>
                After editing the form, the client uses the <strong>setNodeParametersAfterEdit</strong> command to set the parameters in the node. Note that it is possible to
                set the same parameters (or a sub-set of the same parameters) to a different node using this command, without the need to get new form parameters. However, after the first
                successful set operation, any form session used for dynamic validation during edit will not be available on the server any more.
            </p>
            <example caption='Set Node Parameters after editing'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='29'>
      <setNodeParametersAfterEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='id' type='text-single'>
                  <value>Node1</value>
              </field>
              <field var='class' type='list-single'>
                  <value>Temperature</value>
              </field>
              <field var='sn' type='text-single'>
                  <value>123456</value>
              </field>
              <field var='meterLoc' type='text-single'>
                  <value>P123502-2</value>
              </field>
              <field var='addr' type='text-single'>
                  <value>123</value>
              </field>
              <field var='lat' type='text-single'>
                  <value>12.345</value>
              </field>
              <field var='long' type='text-single'>
                  <value>123.45</value>
              </field>
          </x>
      </setNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='29'>
      <setNodeParametersAfterEditResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </setNodeParametersAfterEditResponse>
   </iq>]]>
            </example>
            <p>
                Note that validation rules, pagination, etc., can be stripped from the form when submitting it to the server. Also the form type attribute must be set
                to <strong>'submit'</strong>. Note also that as the <strong>result</strong> attribute is <strong>OK</strong>, it is assumed the server has dropped any parameter form resources
                related to the form, which disables any future dynamic validation of the contents of the form. The newly edited node will also be available in the response
                in a <strong>node</strong> element.
            </p>
        </section2>
        <section2 topic='Set Node Parameters after editing, Failure'>
            <p>
                The following example shows how the server responds when the client tries to set invalid parameters. The response contains detailed information about why, 
                information which the client can use to inform the user (if any) of what went wrong.
            </p>
            <example caption='Set Node Parameters after editing, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='30'>
      <setNodeParametersAfterEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node2' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='id' type='text-single'>
                  <value>Node1</value>
              </field>
              <field var='class' type='list-single'>
                  <value>Temperature</value>
              </field>
              <field var='sn' type='text-single'>
                  <value>123456</value>
              </field>
              <field var='meterLoc' type='text-single'>
                  <value>P123502-2</value>
              </field>
              <field var='addr' type='text-single'>
                  <value>123</value>
              </field>
              <field var='lat' type='text-single'>
                  <value>12.345</value>
              </field>
              <field var='long' type='text-single'>
                  <value>123.45</value>
              </field>
          </x>
      </setNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='30'>
      <setNodeParametersAfterEditResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <error var='id'>There already exists a node with this ID.</error>
      </setNodeParametersAfterEditResponse>
   </iq>]]>
            </example>
            <p>
                As the <strong>result</strong> attribute is <strong>FormError</strong>, the server maintains any parameter form resources related to the form, and features such as 
                dynamic validation of the contents of the form will still be available until the parameters have been successfully set, the operation has been
                explicitly cancelled or a form session time-out has occurred. See <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>
                <note>XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;</note> for more information.
            </p>
        </section2>
        <section2 topic='Get Common Node Parameters for editing'>
            <p>
                Advanced concentrators handling large quantities of nodes may let users edit sets of nodes at once to be practical. This is done by publising the
                <strong>getCommonNodeParametersForEdit</strong> command. It will return a form with parameters that are common for all selected nodes. Since nodes
                may have different node types it is assumed that different nodes have different sets of parameters. But if this command is used, only parameters matching
                in IDs, descriptions, validation rules, etc., (but not values) will be returned in a form.
            </p>
            <p>
                <strong>Important:</strong> A parameter that exists in multiple nodes but having different values will be marked with the <strong>notSame</strong> element,
                according to <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>. Clients using this command MUST support the extensions defined in
                <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>.
            </p>
            <example caption='Get Common Node Parameters for editing'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='31'>
      <getCommonNodeParametersForEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' xml:lang='en'>
         <node sourceId='MeteringTopology' nodeId='Node1'/>
         <node sourceId='MeteringTopology' nodeId='Node2'/>
         <node sourceId='MeteringTopology' nodeId='Node3'/>
      </getCommonNodeParametersForEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='31'>
      <getCommonNodeParametersForEditResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Node1, Node2, Node3</title>
              <xdl:page label='Identity'>
                  <xdl:fieldref var='type'/>
                  <xdl:fieldref var='class'/>
                  <xdl:fieldref var='sn'/>
              </xdl:page>
              <xdl:page label='Location'>
                  <xdl:fieldref var='meterLoc'/>
                  <xdl:fieldref var='lat'/>
                  <xdl:fieldref var='long'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='type' type='text-single' label='Node Type:'>
                  <desc>Type of node.</desc>
                  <value>Watchamacallit Temperature Sensor v1.2</value>
                  <xdd:readOnly/>
                  <xdd:notSame/>
              </field>
              <field var='class' type='list-single' label='Node Class:'>
                  <desc>Class of node</desc>
                  <value>Temperature</value>
                  <xdd:notSame/>
                  <option label='Cooling'><value>Cooling</value></option>
                  <option label='Electricity'><value>Electricity</value></option>
                  <option label='Heating'><value>Heating</value></option>
                  <option label='Pressure'><value>Pressure</value></option>
                  <option label='Temperature'><value>Temperature</value></option>
                  <option label='Water'><value>Water</value></option>
                  ...
              </field>
              <field var='sn' type='text-single' label='Serial Number:'>
                  <desc>Serial number of node/device.</desc>
                  <value>123456</value>
                  <xdd:notSame/>
              </field>
              <field var='meterLoc' type='text-single' label='Meter Location:'>
                  <desc>Meter Location.</desc>
                  <value>P123502-2</value>
                  <xdd:notSame/>
              </field>
              <field var='addr' type='text-single' label='Address:'>
                  <xdv:validate datatype='xs:int'>
                      <xdv:range min='1' max='250'/>
                  </xdv:validate>
                  <desc>Bus address</desc>
                  <value>123</value>
                  <xdd:notSame/>
              </field>
              <field var='lat' type='text-single' label='Latitude:'>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-90' max='90'/>
                  </xdv:validate>
                  <desc>Latitude of node.</desc>
                  <value>12.345</value>
                  <xdd:notSame/>
              </field>
              <field var='long' type='text-single' label='Longitude:'>
                  <xdv:validate datatype='xs:double'>
                      <xdv:range min='-180' max='180'/>
                  </xdv:validate>
                  <desc>Longitude of node.</desc>
                  <value>123.45</value>
                  <xdd:notSame/>
              </field>
          </x>
      </getCommonNodeParametersForEditResponse>
   </iq>]]>
            </example>
            <p>
                Note that parameters that are not available in all selected nodes will have been removed. Also and ID-parameter will have been removed, since they
                cannot be set for a collection of nodes.
            </p>
            <p>
                Fields marked with the <strong>notSame</strong> element only present one value, perhaps the value of the first node. However, the field should be clearly
                marked in any end-user GUI (for example by graying the field), and MUST ONLY be sent back to the server in a set operation if explicitly edited by the end-user.
                The parameter will be set in all selected nodes in that case. Unedited fields should be treated as if the end-user accepts the different values for the current set of nodes.
            </p>
        </section2>
        <section2 topic='Set Common Node Parameters after editing'>
            <p>
                After editing the form, the client uses the <strong>setCommonNodeParametersAfterEdit</strong> command to set the parameters in the set of nodes. Note that it is possible to
                set the same parameters (or a sub-set of the same parameters) to a different set of nodes using this command, without the need to get new form parameters. However, after the first
                successful set operation, any form session used for dynamic validation during edit will not be available on the server any more.
            </p>
            <example caption='Set Common Node Parameters after editing'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='32'>
      <setCommonNodeParametersAfterEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' xml:lang='en'>
          <node sourceId='MeteringTopology' nodeId='Node1'/>
          <node sourceId='MeteringTopology' nodeId='Node2'/>
          <node sourceId='MeteringTopology' nodeId='Node3'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='class' type='list-single'>
                  <value>Temperature</value>
              </field>
          </x>
      </setCommonNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='32'>
      <setCommonNodeParametersAfterEditResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <node id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node1'/>
              <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='123456'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P123502-2'/>
              <int id='addr' name='Address' value='123'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node2' nodeType='Namespace.NodeType2' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node2'/>
              <string id='type' name='Node Type' value='Watchamacallit Pressure Sensor v1.2'/>
              <string id='sn' name='Serial Number' value='234567'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P668632-6'/>
              <int id='addr' name='Address' value='124'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
          <node id='Node3' nodeType='Namespace.NodeType3' cacheType='Node' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root'>
              <string id='id' name='Node ID' value='Node3'/>
              <string id='type' name='Node Type' value='Watchamacallit Electricity Meter v1.2'/>
              <string id='sn' name='Serial Number' value='345678'/>
              <string id='class' name='Node Class' value='Temperature'/>
              <string id='meterLoc' name='Meter Location' value='P332367-9'/>
              <int id='addr' name='Address' value='125'/>
              <double id='lat' name='Latitude' value='12.345'/>
              <double id='long' name='Longitude' value='123.45'/>
          </node>
      </setCommonNodeParametersAfterEditResponse>
   </iq>]]>
            </example>
            <p>
                Note that validation rules, pagination, etc., can be stripped from the form when submitting it to the server. Also the form type attribute must be set
                to <strong>'submit'</strong>. Note also that as the <strong>result</strong> attribute is <strong>OK</strong>, it is assumed the server has dropped any parameter form resources
                related to the form, which disables any future dynamic validation of the contents of the form.
            </p>
            <p>
                <strong>Important:</strong> A parameter that exists in multiple nodes but having different values will be marked with the <strong>notSame</strong> element,
                according to <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>. Such parameters MUST NOT be sent back to the server unless they have explicitly
                beed edited or signed by the end-user. The value sent back to the server will be set in all nodes.
            </p>
        </section2>
        <section2 topic='Set Common Node Parameters after editing, Failure'>
            <p>
                The following example shows how the server responds when the client tries to set invalid parameters to a set of nodes. The response contains detailed information about why,
                information which the client can use to inform the user (if any) of what went wrong.
            </p>
            <example caption='Set Node Parameters after editing, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='33'>
      <setCommonNodeParametersAfterEdit xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' xml:lang='en'>
          <node sourceId='MeteringTopology' nodeId='Node1'/>
          <node sourceId='MeteringTopology' nodeId='Node2'/>
          <node sourceId='MeteringTopology' nodeId='Node3'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>009c7956-001c-43fb-8edb-76bcf74272c9</value>
              </field>
              <field var='id' type='text-single'>
                  <value>Node1</value>
              </field>
              <field var='class' type='list-single'>
                  <value>Temperature</value>
              </field>
          </x>
      </setCommonNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='33'>
      <setCommonNodeParametersAfterEditResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <error var='id'>Parameter not available.</error>
      </setCommonNodeParametersAfterEditResponse>
   </iq>]]>
            </example>
            <p>
                As the <strong>result</strong> attribute is <strong>FormError</strong>, the server maintains any parameter form resources related to the form, and features such as
                dynamic validation of the contents of the form will still be available until the parameters have been successfully set, the operation has been
                explicitly cancelled or a form session time-out has occurred. See <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>
                <note>
                    XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                </note> for more information.
            </p>
        </section2>
        <section2 topic='Get Node Status'>
            <p>
                Each node in the concentrator has a <strong>state</strong>. This state is a dynamic run-time state, and therefore not presented as a more static property.
                This state can be any of the following values, in order of increasing importance:
            </p>
            <table caption='Node states'>
                <tr>
                    <th>State</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>None</td>
                    <td>Nothing has been reported on the node.</td>
                </tr>
                <tr>
                    <td>Information</td>
                    <td>There are informative events reported on the node.</td>
                </tr>
                <tr>
                    <td>WarningSigned</td>
                    <td>There are warnings reported on the node. But these warnings have been viewed by an operator.</td>
                </tr>
                <tr>
                    <td>WarningUnsigned</td>
                    <td>There are new or unreviewed warnings reported on the node.</td>
                </tr>
                <tr>
                    <td>ErrorSigned</td>
                    <td>There are errors reported on the node. But these errors have been viewed by an operator.</td>
                </tr>
                <tr>
                    <td>ErrorUnsigned</td>
                    <td>There are new or unreviewed errors reported on the node.</td>
                </tr>
            </table>
            <p>
                Other types of "states" are of course possible, such as phase - installation phase, test phase, production phase, etc. - but such "states" are seen as static
                and presented as properties on the node. The dynamic information of the <strong>state</strong> attribute of a node, is to give a dynamic runtime state that has
                the possibility to change during runtime, and that operators must be aware of.
            </p>
            <p>
                The following commands have an optional attribute, with which they can ask the server to return any events logged on the node, giving more details of the
                current state of the node:
            </p>
            <ul>
                <li><strong>getNode</strong></li>
                <li><strong>getNodes</strong></li>
                <li><strong>getChildNodes</strong></li>
                <li><strong>getAllNodes</strong></li>
                <li><strong>getRootNodes</strong></li>
                <li><strong>getNodesFromIndex</strong></li>
                <li><strong>getNodesFromIndices</strong></li>
            </ul>
            <example caption='Get Node Status'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='34'>
      <getNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' messages='true' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='34'>
      <getNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK' 
                       id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false'
                       isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
          <message timestamp='2013-03-21T11:06:15' type='WarningUnsigned' id='ClockWarning'>Internal clock is offset more than 7 seconds.</message>
      </getNodeResponse>                       
   </iq>]]>
            </example>
            <p>
                The <strong>messages</strong> attribute can be combined with the <strong>parameters</strong> attribute to provide both node properties and
                messages in the response.
            </p>
            <example caption='Get Node with parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='35'>
      <getNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringTopology' nodeId='Node1' xml:lang='en' parameters='true' messages='true'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='35'>
      <getNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK' 
                       id='Node1' nodeType='Namespace.NodeType1' cacheType='Node' state='WarningUnsigned' hasChildren='false' 
                       isReadable='true' isConfigurable='true' hasCommands='true' parentId='Root' lastChanged='2013-03-19T17:58:01'>
          <string id='id' name='Node ID' value='Node1'/>
          <string id='type' name='Node Type' value='Watchamacallit Temperature Sensor v1.2'/>
          <string id='sn' name='Serial Number' value='123456'/>
          <string id='class' name='Node Class' value='Temperature'/>
          <string id='meterLoc' name='Meter Location' value='P123502-2'/>
          <int id='addr' name='Address' value='123'/>
          <double id='lat' name='Latitude' value='12.345'/>
          <double id='long' name='Longitude' value='123.45'/>
          <message timestamp='2013-03-21T11:06:15' type='WarningUnsigned' id='ClockWarning'>Internal clock is offset more than 7 seconds.</message>
      </getNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Addable Node Types'>
            <p>
                Since nodes are context sensitive, depending on node type and tree structure, before being able to create a new node, it is important to know what types of nodes
                can be added to a given node. This is done using the <strong>getAddableNodeTypes</strong> command, as is shown in the following example:
            </p>
            <example caption='Get Addable Node Types'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='36'>
      <getAddableNodeTypes xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='36'>
      <getAddableNodeTypesResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <nodeType type='Namespace.Apartment' name='Apartment'/>
          <nodeType type='Namespace.MeteringTopologyReference' name='Metering Topology Reference'/>
          <nodeType type='Namespace.Location' name='Service Location'/>
      </getAddableNodeTypesResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Parameters for New Node'>
            <p>
                When you what type of node you want to create, you need to get a set of parameters you need to fill in for the new node, before you can create it.
                This is done using the <strong>getParametersForNewNode</strong> command, as is shown in the following example:
            </p>
            <example caption='Get Parameters for New Node'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='37'>
      <getParametersForNewNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' type='Namespace.MeteringTopologyReference' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='37'>
      <getParametersForNewNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Metering Topology</title>
              <xdl:page label='Identity'>
                  <xdl:fieldref var='id'/>
                  <xdl:fieldref var='referenceId'/>
              </xdl:page>
              <field var='xdd session' type='hidden'>
                  <value>0B146517-8EA3-4BEC-A2E9-CF3F209D4A5D</value>
              </field>
              <field var='id' type='text-single' label='Node ID:'>
                  <desc>ID of the node.</desc>
                  <required/>
                  <value/>
              </field>
              <field var='referenceId' type='text-single' label='Metering Node ID:'>
                  <desc>ID of the node in the metering topology.</desc>
                  <required/>
                  <value/>
              </field>
          </x>
      </getParametersForNewNodeResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Create New Node'>
            <p>
                After editing the form, the client uses the <strong>createNewNode</strong> command to create the new node using the parameters provided in the form.
            </p>
            <example caption='Create New Node after editing'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='38'>
      <createNewNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' type='Namespace.MeteringTopologyReference' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>0B146517-8EA3-4BEC-A2E9-CF3F209D4A5D</value>
              </field>
              <field var='id' type='text-single'>
                  <value>Reference to Node1</value>
              </field>
              <field var='referenceId' type='text-single'>
                  <value>Node1</value>
              </field>
          </x>
      </setNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='38'>
      <createNewNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Reference to Node1' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='B1'>
              <string id='id' name='Node ID' value='Reference to Node1'/>
              <string id='type' name='Node Type' value='Metering Topology Reference'/>
              <string id='referenceId' name='Reference ID' value='Node1'/>
          </node>
      </createNewNodeResponse>
   </iq>]]>
            </example>
            <p>
                Note that validation rules, pagination, etc., can be stripped from the form when submitting it to the server. Also the form type attribute must be set
                to <strong>'submit'</strong>. Note also that as the <strong>result</strong> attribute is <strong>OK</strong>, it is assumed the server has dropped any parameter form resources
                related to the form, which disables any future dynamic validation of the contents of the form. The newly created node with corresponding parameters is also returned
                in the response in a <strong>node</strong> element.
            </p>
        </section2>
        <section2 topic='Create New Node, Failure'>
            <p>
                The following example shows how the server responds when it cannot accept parameters provided when trying to create a node. The response will contain detailed information 
                about why, information which the client can use to inform the user (if any) of what went wrong.
            </p>
            <example caption='Create New Node, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='39'>
      <createNewNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' type='Namespace.MeteringTopologyReference' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>0B146517-8EA3-4BEC-A2E9-CF3F209D4A5D</value>
              </field>
              <field var='id' type='text-single'>
                  <value>Node2</value>
              </field>
              <field var='referenceId' type='text-single'>
                  <value>NodeX</value>
              </field>
          </x>
      </setNodeParametersAfterEdit>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='39'>
      <createNewNodeResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <error var='id'>There already exists a node with this ID.</error>
          <error var='referenceId'>Referenced node was not found.</error>
      </createNewNodeResponse>
   </iq>]]>
            </example>
            <p>
                As the <strong>result</strong> attribute is <strong>FormError</strong>, the server maintains any parameter form resources related to the form, and features such as
                dynamic validation of the contents of the form will still be available until the parameters have been successfully set, the operation has been
                explicitly cancelled or a form session time-out has occurred. See <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>
                <note>
                    XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                </note> for more information.
            </p>
        </section2>
        <section2 topic='Destroy Node'>
            <p>
                To destroy (remove) a node from the concentrator, the <strong>destroyNode</strong> command is sent, as is shown in the following example:
            </p>
            <example caption='Destroy Node'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='40'>
      <destroyNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='40'>
      <destroyNodeResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
            <p>
                Since the <strong>result</strong> attribute in the response is <strong>OK</strong>, the node has been removed.
            </p>
        </section2>
        <section2 topic='Destroy Node, Failure'>
            <p>
                If the <strong>result</strong> attribute in the response is other than <strong>OK</strong>, the node was not removed from the concentrator.
                The <strong>result</strong> attribute contains the reason why the operation failed, as is shown in the following example:
            </p>
            <example caption='Destroy Node, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='41'>
      <destroyNode xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='B1' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='41'>
      <destroyNodeResponse xmlns='urn:xmpp:sn:concentrators' result='InsufficientPrivileges'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Node Ancestors'>
            <p>
                In a tree formed data source, all nodes except the root node has a parent node. The <strong>getAncestors</strong> command allows the client to get a list
                of all ancestors (parent, grand parent, etc.) of a node, as is shown in the following example:
            </p>
            <example caption='Get Node Ancestors'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='42'>
      <getAncestors xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Node2' parameters='false' messages='false' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='42'>
      <getAncestorsResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <node id='Node2' nodeType='Namespace.MeteringTopologyReference' state='None' hasChildren='false' 
                isReadable='true' isConfigurable='true' hasCommands='true' parentId='Apartment 1-1'/>
          <node id='Apartment 1-1' nodeType='Namespace.Apartment' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Building 1'/>
          <node id='Building 1' nodeType='Namespace.Building' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Street'/>
          <node id='Street' nodeType='Namespace.Street' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Area'/>
          <node id='Area' nodeType='Namespace.Area' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='City'/>
          <node id='City' nodeType='Namespace.City' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Region'/>
          <node id='Region' nodeType='Namespace.Region' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Country'/>
          <node id='Country' nodeType='Namespace.Country' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true' parentId='Root'/>
          <node id='Root' nodeType='Namespace.Root' state='None' hasChildren='true' 
                isReadable='false' isConfigurable='false' hasCommands='true'/>
      </getAncestorsResponse>
   </iq>]]>
            </example>
            <p>
                Note that the concentrator returns information about the node itself in the response. The <strong>parameters</strong> and <strong>messages</strong>
                attributes are used in the request to control if the concentrator should return node parameters and node status messages in the response as well.
            </p>
        </section2>
        <section2 topic='Get Node Commands'>
            <p>
                Each node can have a context sensitive set of commands available to it. This is shown using the <strong>hasCommands</strong> attribute in the
                <link url='#nodeinfo'>Node Information</link> record describing the corresponding node. If the client wants to get a list of available commands,
                the <strong>getNodeCommands</strong> command is sent to the concentrator, as is shown in the following example:
            </p>
            <example caption='Get Node Commands'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='43'>
      <getNodeCommands xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Apartment 1-1' xml:lang='en'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='43'>
      <getNodeCommandsResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <command id='knockDoor' name='Knock on door' type='Simple' 
                   confirmationString='Are you sure you want to knock on the door?'
                   failureString='Unable to knock on the dorr.'
                   successString='Door knocked.'/>
          <command id='scheduleWakeupCall' name='Schedule wakeup call' type='Parametrized' 
                   failureString='Unable to schedule the wakeup call.'
                   successString='Wakeup call scheduled.'/>
      </getNodeCommandsResponse>
   </iq>]]>
            </example>
            <p>
                There are two types of commands available: <strong>Simple</strong> and <strong>Parametrized</strong>. <strong>Simple</strong> commands take no parameters, and
                are therefore simpler to execute. <strong>Parametrized</strong> commands require the client to get a set of parameters for the corresponding command before it
                can be executed. For more information about command attributes, see <link url='#nodecommands'>Node Commands</link>.
            </p>
        </section2>
        <section2 topic='Execute Simple Node Command'>
            <p>
                Executing a simple command is done by sending the <strong>executeNodeCommand</strong> command to the concentrator, as is shown in the following example:
            </p>
            <example caption='Execute Simple Node Command'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='44'>
      <executeNodeCommand xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Apartment 1-1' command='knockDoor'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='44'>
      <executeNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Node Command Parameters'>
            <p>
                To execute a parametrized command on the node, the client first needs to get (and edit) a set of parameters for the command. Getting a set of parameters for a
                parametrized command is done as follows:
            </p>
            <example caption='Get Node Command Parameters'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='45'>
      <getCommandParameters xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Apartment 1-1' command='scheduleWakeupCall'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='45'>
      <getCommandParametersResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Schedule wake-up call</title>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single' label='Time:'>
                  <desc>Time of the wake-up call.</desc>
                  <required/>
                  <value></value>
                  <xdv:validate datatype='xs:time'/>
                      <xdv:basic/>
                  </xdv:validate>
              </field>
              <field var='mode' type='list-single' label='Wake-up mode:'>
                  <desc>Type of wake-up call</desc>
                  <value>Soft</value>
                  <option label='Soft'><value>Soft</value></option>
                  <option label='Normal'><value>Normal</value></option>
                  <option label='Harass'><value>Harass</value></option>
              </field>
          </x>
      </getCommandParametersResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Execute Parametrized Node Command'>
            <p>
                Executing a parametrized command is also done by sending the <strong>executeNodeCommand</strong> command to the concentrator, but including the edited form parameters, 
                as is shown in the following example:
            </p>
            <example caption='Execute Parametrized Node Command'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='46'>
      <executeNodeCommand xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Apartment 1-1' command='scheduleWakeupCall' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single'>
                  <value>04:30:00</value>
              </field>
              <field var='mode' type='list-single'>
                  <value>Harass</value>
              </field>
          </x>
      </executeNodeCommand>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='46'>
      <executeNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Execute Node Command, Failure'>
            <p>
                If an error occurs during the execution of a command or if the server rejects the execution of a command, the server returns a response code different from
                <strong>OK</strong>. If the response code is <strong>FormError</strong>, the server maintains any parameter form resources related to the form, and features such as
                dynamic validation of the contents of the form will still be available until the parameters have been successfully set, the operation has been
                explicitly cancelled or a form session time-out has occurred. See <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>
                <note>
                    XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                </note> for more information.
            </p>
            <example caption='Execute Node Command, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='47'>
      <executeNodeCommand xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringGroups' nodeId='Apartment 1-1' command='scheduleWakeupCall' xml:lang='en'>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single'>
                  <value>04:30:00</value>
              </field>
              <field var='mode' type='list-single'>
                  <value>Harass</value>
              </field>
          </x>
      </executeNodeCommand>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='47'>
      <executeNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <error var='mode'>You are not allowed to harass people at 04:30:00!</error>
      </executeNodeCommandResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Common Commands for Nodes'>
            <p>
                Using the command <strong>getCommonNodeCommands</strong>, the client can receive commands that are common for a set of nodes, 
                as is shown in the following example:
            </p>
            <example caption='Get Common Commands for Nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='48'>
      <getCommonNodeCommands xmlns='urn:xmpp:sn:concentrators' xml:lang='en'>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-1'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-2'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-3'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-4'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-5'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-6'/>
      </getCommonNodeCommands>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='48'>
      <getNodeCommandsResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <command id='knockDoor' name='Knock on door' type='Simple' 
                   confirmationString='Are you sure you want to knock on the door?'
                   failureString='Unable to knock on the dorr.'
                   successString='Door knocked.'/>
          <command id='scheduleWakeupCall' name='Schedule wakeup call' type='Parametrized' 
                   failureString='Unable to schedule the wakeup call.'
                   successString='Wakeup call scheduled.'/>
      </getNodeCommandsResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Execute Simple Command on multiple nodes'>
            <p>
                Executing a simple command on multiple nodes is done by sending the <strong>executeCommonNodeCommand</strong> command to the concentrator, 
                as is shown in the following example:
            </p>
            <example caption='Execute Simple Command on multiple nodes'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='49'>
      <executeCommonNodeCommand xmlns='urn:xmpp:sn:concentrators' command='knockDoor'>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-1'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-2'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-3'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-4'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-5'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-6'/>
      </executeCommonNodeCommand>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='49'>
      <executeCommonNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Get Common Command Parameters from command on multiple nodes'>
            <p>
                To execute a parametrized command on a set of nodes, the client first needs to get (and edit) a set of parameters for the common command. Getting a set of parameters for a
                common parametrized command is done as follows:
            </p>
            <example caption='Get Common Command Parameters from command on multiple nodes'>
                <![CDATA[
   <iq type='get'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='50'>
      <getCommonCommandParameters xmlns='urn:xmpp:sn:concentrators' command='scheduleWakeupCall'>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-1'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-2'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-3'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-4'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-5'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-6'/>
      </getCommonCommandParameters>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='50'>
      <getCommonCommandParametersResponse xmlns='urn:xmpp:sn:concentrators' result='OK'>
          <x type='form' 
             xmlns='jabber:x:data' 
             xmlns:xdv='http://jabber.org/protocol/xdata-validate'
             xmlns:xdl:='http://jabber.org/protocol/xdata-layout'
             xmlns:xdd:='http://jabber.org/protocol/xdata-dynamic'>
              <title>Schedule wake-up call</title>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single' label='Time:'>
                  <desc>Time of the wake-up call.</desc>
                  <required/>
                  <value></value>
                  <xdv:validate datatype='xs:time'/>
                      <xdv:basic/>
                  </xdv:validate>
              </field>
              <field var='mode' type='list-single' label='Wake-up mode:'>
                  <desc>Type of wake-up call</desc>
                  <value>Soft</value>
                  <option label='Soft'><value>Soft</value></option>
                  <option label='Normal'><value>Normal</value></option>
                  <option label='Harass'><value>Harass</value></option>
              </field>
          </x>
      </getCommandParametersResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Execute Common Parametrized Command on multiple nodes'>
            <p>
                Executing a common parametrized command is also done by sending the <strong>executeCommonNodeCommand</strong> command to the concentrator, but including the edited form parameters,
                as is shown in the following example:
            </p>
            <example caption='Execute Common Parametrized Command on multiple nodes'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='51'>
      <executeCommonNodeCommand xmlns='urn:xmpp:sn:concentrators' command='scheduleWakeupCall' xml:lang='en'>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-1'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-2'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-3'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-4'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-5'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-6'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single'>
                  <value>04:30:00</value>
              </field>
              <field var='mode' type='list-single'>
                  <value>Harass</value>
              </field>
          </x>
      </executeCommonNodeCommand>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='51'>
      <executeCommonNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Execute Parametrized Command on multiple Nodes, Failure'>
            <p>
                If an error occurs during the execution of a common command or if the server rejects the execution of a common command, the server returns a response code different from
                <strong>OK</strong>. If the response code is <strong>FormError</strong>, the server maintains any parameter form resources related to the form, and features such as
                dynamic validation of the contents of the form will still be available until the parameters have been successfully set, the operation has been
                explicitly cancelled or a form session time-out has occurred. See <link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms</link>
                <note>
                    XEP-xxxx: Dynamic Data Forms &lt;<link url='xep-0000-DynamicForms.html'>xep-0000-DynamicForms.html</link>&gt;
                </note> for more information.
            </p>
            <example caption='Execute Parametrized Command on multiple Nodes, Failure'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='52'>
      <executeCommonNodeCommand xmlns='urn:xmpp:sn:concentrators' command='scheduleWakeupCall' xml:lang='en'>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-1'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-2'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-3'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-4'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-5'/>
          <node sourceId='MeteringGroups' nodeId='Apartment 1-6'/>
          <x type='submit' xmlns='jabber:x:data'>
              <field var='xdd session' type='hidden'>
                  <value>E14E330F-8496-46F0-8F40-178808AB13A7</value>
              </field>
              <field var='time' type='text-single'>
                  <value>04:30:00</value>
              </field>
              <field var='mode' type='list-single'>
                  <value>Harass</value>
              </field>
          </x>
      </executeCommonNodeCommand>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='52'>
      <executeCommonNodeCommandResponse xmlns='urn:xmpp:sn:concentrators' result='FormError'>
          <error var='mode'>You are not allowed to harass people at 04:30:00!</error>
      </executeCommonNodeCommandResponse>
   </iq>]]>
            </example>
        </section2>
        <section2 topic='Move Node Up'>
            <p>
                As the order of siblings in a tree can be important, depending on the context and type of nodes involved, the client may be allowed to move nodes up and down among siblings.
                To move a node upwards among its siblings is done using the command <strong>moveNodeUp</strong>, as is shown in the following example:
            </p>
            <example caption='Move Node Up'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='53'>
      <moveNodeUp xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringFieldProcessors' nodeId='LogicalOperator'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='53'>
      <moveNodeUpResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
            <p>
                Note that a node that is first among its siblings will maintain its position. The response to the command must still be <strong>OK</strong>.
            </p>
        </section2>
        <section2 topic='Move Node Down'>
            <p>
                As the order of siblings in a tree can be important, depending on the context and type of nodes involved, the client may be allowed to move nodes up and down among siblings.
                To move a node downwards among its siblings is done using the command <strong>moveNodeDown</strong>, as is shown in the following example:
            </p>
            <example caption='Move Node Up'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='54'>
      <moveNodeDown xmlns='urn:xmpp:sn:concentrators' sourceId='MeteringFieldProcessors' nodeId='LogicalOperator'/>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='54'>
      <moveNodeDownResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
            <p>
                Note that a node that is last among its siblings will maintain its position. The response to the command must still be <strong>OK</strong>.
            </p>
        </section2>
        <section2 topic='Move Nodes Up'>
            <p>
                To move a set of nodes upwards among its siblings is done using the command <strong>moveNodesUp</strong>, as is shown in the following example:
            </p>
            <example caption='Move Nodes Up'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='55'>
      <moveNodseUp xmlns='urn:xmpp:sn:concentrators'>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator3'/>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator4'/>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator5'/>
      </moveNodseUp>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='55'>
      <moveNodesUpResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
            <p>
                Note that a node that is first among its siblings will maintain its position. The response to the command must still be <strong>OK</strong>. If an attempt is performed to move a 
                sequence of nodes that are together first as siblings, none of the nodes move relative to each other.
            </p>
        </section2>
        <section2 topic='Move Nodes Down'>
            <p>
                To move a set of nodes downwards among its siblings is done using the command <strong>moveNodesDown</strong>, as is shown in the following example:
            </p>
            <example caption='Move Node Up'>
                <![CDATA[
   <iq type='set'
       from='client@clayster.com'
       to='concentrator@clayster.com'
       id='56'>
      <moveNodesDown xmlns='urn:xmpp:sn:concentrators'>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator3'/>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator4'/>
          <node sourceId='MeteringFieldProcessors' nodeId='LogicalOperator5'/>
      </moveNodseDown>
   </iq>
   
   <iq type='result'
       from='concentrator@clayster.com'
       to='client@clayster.com'
       id='56'>
      <moveNodesDownResponse xmlns='urn:xmpp:sn:concentrators' result='OK'/>
   </iq>]]>
            </example>
            <p>
                Note that a node that is last among its siblings will maintain its position. The response to the command must still be <strong>OK</strong>. If an attempt is performed to move a
                sequence of nodes that are together last as siblings, none of the nodes move relative to each other.
            </p>
        </section2>
        <section2 topic='Subscribe to data source changes'>
            <!-- TODO -->
        </section2>
        <section2 topic='Unsubscribe to data source changes'>
            <!-- TODO -->
        </section2>
        <section2 topic='Get changes since'>
            <!-- TODO -->
        </section2>
        <!-- TODO: Data sets -->
    </section1>
    <section1 topic='Implementation Notes' anchor='impl'>
        <section2 topic='Node Information' anchor='nodeinfo'>
            <p>
                Several commands return basic node information. The following table lists possible fields with corresponding descriptions.
            </p>
            <!-- TODO: Update list -->
            <table caption='Basic Node Information'>
                <tr>
                    <th>Attribute</th>
                    <th>Use</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>id</td>
                    <td>required</td>
                    <td>&nbsp;</td>
                    <td>The ID of the node in the data source.</td>
                </tr>
                <tr>
                    <td>displayName</td>
                    <td>optional</td>
                    <td>&nbsp;</td>
                    <td>If provided, a string presentable to users. If localization is supported and a correct language attribute was provided, this string will be localized.</td>
                </tr>
                <tr>
                    <td>localId</td>
                    <td>optional</td>
                    <td>&nbsp;</td>
                    <td>If provided, an ID for the node, but unique locally between siblings.</td>
                </tr>
                <tr>
                    <td>logId</td>
                    <td>optional</td>
                    <td>&nbsp;</td>
                    <td>If provided, an ID for the node, as it would appear or be used in system logs.</td>
                </tr>
                <tr>
                    <td>cacheType</td>
                    <td>required</td>
                    <td>&nbsp;</td>
                    <td>Used to uniquelly identify the node. If concentrators do not use this parameter, they can set this string to the empty string.</td>
                </tr>
                <tr>
                    <td>state</td>
                    <td>required</td>
                    <td>&nbsp;</td>
                    <td>Current overall state of the node.</td>
                </tr>
                <tr>
                    <td>hasChildren</td>
                    <td>required</td>
                    <td>&nbsp;</td>
                    <td>If the node has children or not.</td>
                </tr>
                <tr>
                    <td>isReadable</td>
                    <td>optional</td>
                    <td>false</td>
                    <td>If the node can be read. (*)</td>
                </tr>
                <tr>
                    <td>isConfigurable</td>
                    <td>optional</td>
                    <td>false</td>
                    <td>If the node can be configured. (**)</td>
                </tr>
                <tr>
                    <td>hasCommands</td>
                    <td>optional</td>
                    <td>false</td>
                    <td>If the node has registered commands or not.</td>
                </tr>
            </table>
            <p>
                (*) See <link url='xep-0000-SN-SensorData.html'>xep-0000-SN-SensorData</link> for more information about how to read nodes.
            </p>
            <p>
                (**) See <link url='xep-0000-SN-Control.html'>xep-0000-SN-Control</link> for more information about how to configure nodes.
            </p>
        </section2>
        <!-- TODO: Parameter types -->
        <!-- TODO: Response codes, available in all response stanzas -->
        <!-- TODO: Respond even to commands not recognized. <holabandola .../>    <holabandolaResponse responseCode='NotImplemented'/>-->
        <!-- TODO: Node commands #nodecommands -->
        <!-- TODO: Requirement to implement the Sensor Data XEP (data source: Topology) -->
    </section1>
    <section1 topic='Internationalization Considerations' anchor='i18n'>
        <section2 topic='Localization'>
            <p>
                Loalization of content can be performed if clients provide <strong>xml:lang</strong> attributes in commands made to the concentrator. If omitted, the
                <strong>default language</strong> will be used in responses. If provided, but the concentrator does not support localization, or the requested language,
                the <strong>default language</strong> will also be used.
            </p>
        </section2>
        <section2 topic='Time Zones'>
            <p>
                Concentrators of larger sub-systems spanning multiple time-zones should specify all timestamps with time-zone information, so readers can perform comparisons
                of time information.
            </p>
            <p>
                Information read from a concentrator that lacks time-zone information should be considered to lie in the same time-zone as the reader, unless not explicitly
                configured with a time-zone.
            </p>
        </section2>
        <section2 topic='Interoperability'>
            <!-- TODO: Link to Interoperability XEP, listing data sources, index names, etc., for interoperability in sensor networks. -->
        </section2>
    </section1>
    <section1 topic='Security Considerations' anchor='security'>
        <section2 topic='Access rights'>
            <p>
                This document publishes a lot of commands with which to interact with a concentrator. If security and access rights is an issue, it might not be sufficient
                to allow all friends access to the system. There are many ways in which to restrict access to the contents of the concentrator. Following are some examples:
            </p>
            <ul>
                <li>
                    The concentrator can restrict friendships to trusted friends, and then assign access rights internally to the approved contacts.
                </li>
                <li>
                    The concentrator can use a provisioning server (see <link url='xep-0000-SN-Provisioning.html'>xep-0000-SN-Provisioning.html</link>) to delegate trust
                    to a third party responsible for controlling who can get access to the concentrator (<strong>isFriend</strong> or <strong>canAccess</strong> commands), 
                    and what items can be viewed (<strong>hasPrivilege</strong> or <strong>downloadPrivileges</strong> commands).
                </li>
                <li>
                    All requests to the concentrator can contain the optional attributes <strong>deviceToken</strong>, <strong>serviceToken</strong> and <strong>userToken</strong>.
                    Clients making requests to the concentrator can use these attributes to forward information about who originated the action (<strong>userToken</strong>),
                    what service is performing the action (<strong>serviceToken</strong>) or what device is performing the action(<strong>deviceToken</strong>). The concentrator
                    can use this information to check with provisioning servers what access rights and user privileges exist before performing the action.
                </li>
            </ul>
        </section2>
        <section2 topic='Restricting access to commands per contact'>
            <!-- TODO -->
        </section2>
        <section2 topic='Restricting access to node properties per contact'>
            <!-- TODO -->
        </section2>
        <section2 topic='Restricting access to node commands per contact'>
            <!-- TODO -->
        </section2>
    </section1>
    <section1 topic='IANA Considerations' anchor='iana'>
        <p>REQUIRED.</p>
    </section1>
    <section1 topic='XMPP Registrar Considerations' anchor='registrar'>
        <p>REQUIRED.</p>
    </section1>
    <section1 topic='XML Schema' anchor='schema'>
        <!-- TODO: Update with current schema -->
        <code>
            <![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:sn:concentrators'
    xmlns='urn:xmpp:sn:concentrators'
    xmlns:sn='urn:xmpp:sn'
    xmlns:xd="jabber:x:data"
    xmlns:xdv="http://jabber.org/protocol/xdata-validate"
    xmlns:xdl="http://jabber.org/protocol/xdata-layout"
    elementFormDefault='qualified'>
 
    <xs:import namespace='urn:xmpp:sn'/>
    <xs:import namespace='jabber:x:data'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-validate'/>
    <xs:import namespace='http://jabber.org/protocol/xdata-layout'/>
 
    <xs:element name='getCapabilities' type='TokenRequest'/>
    <xs:element name='getCapabilitiesResponse' type='StringArray'/>
 
    <xs:element name='getAllDataSources' type='TokenRequest'/>
    <xs:element name='getAllDataSourcesResponse' type='DataSourceArray'/>
 
    <xs:element name='getTopDataSources' type='TokenRequest'/>
    <xs:element name='getTopDataSourcesResponse' type='DataSourceArray'/>
 
    <xs:element name='getChildDataSources' type='SourceReferenceRequest'/>
    <xs:element name='getChildDataSourcesResponse' type='DataSourceArray'/>
 
    <xs:complexType name='TokenRequest'>
        <xs:attributeGroup ref='tokens'/>
    </xs:complexType>
 
    <xs:attributeGroup name='tokens'>
        <xs:attribute name='deviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='serviceToken' type='xs:string' use='optional'/>
        <xs:attribute name='userToken' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:complexType name='SourceReferenceRequest'>
        <xs:complexContent>
            <xs:extension base='TokenRequest'>
                <xs:attributeGroup ref='sourceReference'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:attributeGroup name='sourceReference'>
        <xs:attribute name='sourceId' type='xs:string' use='required'/>
    </xs:attributeGroup>
 
    <xs:complexType name='DataSource'>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='name' type='xs:string' use='required'/>
        <xs:attribute name='hasChildren' type='xs:boolean' use='optional' default='false'/>
    </xs:complexType>
 
    <xs:complexType name='DataSourceArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='dataSource' type='DataSource'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:element name='containsNode' type='NodeReferenceRequest'/>
    <xs:element name='containsNodeResponse' type='xs:boolean'/>
 
    <xs:element name='containsNodes' type='NodeReferencesRequest'/>
    <xs:element name='containsNodesResponse' type='BooleanArray'/>
 
    <xs:complexType name='NodeReferenceRequest'>
        <xs:complexContent>
            <xs:extension base='TokenRequest'>
                <xs:attributeGroup ref='nodeReference'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='NodeReference'>
        <xs:attributeGroup ref='nodeReference'/>
    </xs:complexType>
 
    <xs:complexType name='NodeReferencesRequest'>
        <xs:complexContent>
            <xs:extension base='TokenRequest'>
                <xs:sequence minOccurs='0' maxOccurs='unbounded'>
                    <xs:element name='node' type='NodeReference'/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:attributeGroup name='nodeReference'>
        <xs:attributeGroup ref='sourceReference'/>
        <xs:attribute name='nodeId' type='xs:string' use='required'/>
        <xs:attribute name='cacheType' type='xs:string' use='optional'/>
    </xs:attributeGroup>
 
    <xs:element name='getNode' type='NodeReferenceParametersRequest'/>
    <xs:element name='getNodeResponse' type='NodeInformation'/>
 
    <xs:element name='getNodes' type='NodeReferenceParametersRequest'/>
    <xs:element name='getNodesResponse' type='NodeInformationArray'/>
  
    <xs:element name='getAllNodes' type='NodeReferenceParametersRequest'/>
    <xs:element name='getAllNodesResponse' type='NodeInformationArray'/>
 
    <xs:element name='getRootNodes' type='NodeReferenceParametersRequest'/>
    <xs:element name='getRootNodesResponse' type='NodeInformationArray'/>
 
    <xs:element name='getChildNodes' type='NodeReferenceParametersRequest'/>
    <xs:element name='getChildNodesResponse' type='NodeInformationArray'/>
 
    <xs:complexType name='NodeReferenceParametersRequest'>
        <xs:complexContent>
            <xs:extension base='NodeReferenceRequest'>
                <xs:attribute name='parameters' type='xs:boolean' use='optional' default='false'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='GetAllNodesRequest'>
        <xs:complexContent>
            <xs:extension base='SourceReferenceRequest'>
                <xs:sequence minOccurs='0' maxOccurs='unbounded'>
                    <xs:element name='onlyIfDerivedFrom' type='xs:string'/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='GetChildNodesRequest'>
        <xs:complexContent>
            <xs:extension base='NodeReferenceRequest'>
                <xs:sequence minOccurs='0' maxOccurs='unbounded'>
                    <xs:element name='sortOrder' type='SortOrder'/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='SortOrder'>
        <xs:attribute name='parameterName' type='xs:string' use='required'/>
        <xs:attribute name='ascending' type='xs:boolean' use='optional' default='true'/>
    </xs:complexType>
 
    <xs:complexType name='NodeInformation'>
        <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='boolean' type='BooleanParameter'/>
            <xs:element name='color' type='ColorParameter'/>
            <xs:element name='dateTime' type='DateTimeParameter'/>
            <xs:element name='double' type='DoubleParameter'/>
            <xs:element name='duration' type='DurationParameter'/>
            <xs:element name='int' type='IntParameter'/>
            <xs:element name='long' type='LongParameter'/>
            <xs:element name='string' type='StringParameter'/>
            <xs:element name='time' type='TimeParameter'/>
        </xs:choice>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='displayName' type='xs:string' use='optional'/>
        <xs:attribute name='localId' type='xs:string' use='optional'/>
        <xs:attribute name='logId' type='xs:string' use='optional'/>
        <xs:attribute name='cacheType' type='xs:string' use='required'/>
        <xs:attribute name='state' type='NodeState' use='required'/>
        <xs:attribute name='hasChildren' type='xs:boolean' use='required'/>
        <xs:attribute name='isReadable' type='xs:boolean' use='optional' default='false'/>
        <xs:attribute name='isConfigurable' type='xs:boolean' use='optional' default='false'/>
        <xs:attribute name='hasCommands' type='xs:boolean' use='optional' default='false'/>
        <xs:attribute name='parentId' type='xs:string' use='optional'/>
        <xs:attribute name='parentCacheType' type='xs:string' use='optional'/>
    </xs:complexType>
 
    <xs:complexType name='Parameter' abstract='true'>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='name' type='xs:string' use='required'/>
    </xs:complexType>
 
    <xs:complexType name='BooleanParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:boolean' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='ColorParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='Color' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:simpleType name='Color'>
        <xs:restriction base='xs:string'>
            <xs:pattern value='^[0-9a-fA-F]{6}$'/>
        </xs:restriction>    
    </xs:simpleType>
 
    <xs:complexType name='DateTimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:dateTime' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DoubleParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:double' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='DurationParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:duration' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='IntParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:int' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='LongParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:long' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='StringParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:string' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='TimeParameter'>
        <xs:complexContent>
            <xs:extension base='Parameter'>
                <xs:attribute name='value' type='xs:time' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='NodeInformationArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='node' type='NodeInformation'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:simpleType name='NodeState'>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='None'/>
            <xs:enumeration value='Information'/>
            <xs:enumeration value='WarningSigned'/>
            <xs:enumeration value='WarningUnsigned'/>
            <xs:enumeration value='ErrorSigned'/>
            <xs:enumeration value='ErrorUnsigned'/>
        </xs:restriction>
    </xs:simpleType>
 
    <xs:element name='getIndices' type='SourceReferenceRequest'/>
    <xs:element name='getIndicesResponse' type='StringArray'/>
 
    <xs:complexType name='StringArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='value' type='xs:string'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:complexType name='BooleanArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='value' type='xs:boolean'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:element name='getNodeFromIndex' type='IndexReferenceRequest'/>
    <xs:element name='getNodeFromIndexResponse' type='NodeInformation'/>
 
    <xs:element name='getNodesFromIndex' type='IndexReferencesRequest'/>
    <xs:element name='getNodesFromIndexResponse' type='NodeInformationArray'/>
 
    <xs:complexType name='IndexReferenceRequest'>
        <xs:complexContent>
            <xs:extension base='TokenRequest'>
                <xs:attributeGroup ref='indexReference'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:complexType name='IndexReference'>
        <xs:attributeGroup ref='indexReference'/>
    </xs:complexType>
 
    <xs:complexType name='IndexReferencesRequest'>
        <xs:complexContent>
            <xs:extension base='TokenRequest'>
                <xs:sequence minOccurs='0' maxOccurs='unbounded'>
                    <xs:element name='indexRef' type='IndexReference'/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:attributeGroup name='indexReference'>
        <xs:attributeGroup ref='sourceReference'/>
        <xs:attribute name='index' type='xs:string' use='required'/>
        <xs:attribute name='indexValue' type='xs:string' use='required'/>
    </xs:attributeGroup>
 
    <xs:element name='getAllNodesFromIndex' type='IndexReferenceRequest'/>
    <xs:element name='getAllNodesFromIndexResponse' type='NodeInformationArray'/>
 
    <xs:element name='getNodeParameters' type='NodeReferenceRequest'/>
    <xs:element name='getNodeParametersResponse' type='ParameterForm'/>
 
    <xs:element name='getCommonNodeParameters' type='NodeReferencesRequest'/>
    <xs:element name='getCommonNodeParametersResponse' type='ParameterForm'/>
 
    <xs:complexType name='ParameterForm'>
        <xs:sequence>
            <xs:any minOccurs="1" maxOccurs="1" namespace="jabber:x:data"/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:element name='getNodeStatus' type='NodeReferenceRequest'/>
    <xs:element name='getNodeStatusResponse' type='MessageArray'/>
 
    <xs:complexType name='Message'>
        <xs:simpleContent>
            <xs:extension base='xs:string'>
                <xs:attribute name='timestamp' type='xs:dateTime' use='required'/>
                <xs:attribute name='type' type='MessageType' use='required'/>
                <xs:attribute name='id' type='xs:string' use='optional'/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
 
    <xs:complexType name='MessageArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='message' type='Message'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:simpleType name='MessageType'>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='Error'/>
            <xs:enumeration value='Warning'/>
            <xs:enumeration value='Information'/>
        </xs:restriction>
    </xs:simpleType>
 
    <xs:element name='getAddableNodeTypes' type='NodeReferenceRequest'/>
    <xs:element name='getAddableNodeTypesResponse' type='StringArray'/>
    <!-- & Displayable type names -->
 
    <xs:element name='getParametersForNewNode' type='NodeTypeReferenceRequest'/>
    <xs:element name='getParametersForNewNodeResponse' type='ParameterForm'/>
 
    <xs:complexType name='NodeTypeReferenceRequest'>
        <xs:complexContent>
            <xs:extension base='NodeReferenceRequest'>
                <xs:attribute name='type' type='xs:string' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:element name='createNewNode' type='NodeTypeReferenceRequest'/>
    <xs:element name='createNewNodeResponse' type='NodeInformation'/>
 
    <xs:element name='destroyNode' type='NodeReferenceRequest'/>
    <xs:element name='destroyNodeResponse' type='EmptyResponse'/>
 
    <xs:complexType name='EmptyResponse'/>
 
    <xs:element name='getAncestors' type='NodeReferenceRequest'/>
    <xs:element name='getAncestorsResponse' type='NodeInformationArray'/>
 
    <xs:element name='getNodeCommands' type='NodeReferenceRequest'/>
    <xs:element name='getNodeCommandsResponse' type='CommandArray'/>
 
    <xs:element name='getCommonNodeCommands' type='NodeReferencesRequest'/>
    <xs:element name='getCommonNodeCommandsResponse' type='CommandArray'/>
 
    <xs:complexType name='Command'>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='name' type='xs:string' use='required'/>
        <xs:attribute name='type' type='CommandType' use='required'/>
        <xs:attribute name='sortCategory' type='xs:string' use='optional'/>
        <xs:attribute name='sortKey' type='xs:string' use='optional'/>
        <xs:attribute name='confirmationString' type='xs:string' use='optional'/>
        <xs:attribute name='failureString' type='xs:string' use='optional'/>
        <xs:attribute name='successString' type='xs:string' use='optional'/>
    </xs:complexType>
 
    <xs:complexType name='CommandArray'>
        <xs:sequence minOccurs='0' maxOccurs='unbounded'>
            <xs:element name='message' type='Command'/>
        </xs:sequence>
    </xs:complexType>
 
    <xs:simpleType name='CommandType'>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='Simple'/>
            <xs:enumeration value='Parametrized'/>
        </xs:restriction>
    </xs:simpleType>
 
    <xs:complexType name='NodeCommandReferenceRequest'>
        <xs:complexContent>
            <xs:extension base='NodeReferenceRequest'>
                <xs:attribute name='command' type='xs:string' use='required'/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
 
    <xs:element name='getCommandParameters' type='NodeCommandReferenceRequest'/>
    <xs:element name='getCommandParametersResponse' type='ParameterForm'/>
 
    <xs:element name='getCommonCommandParameters'>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base='NodeReferencesRequest'>
                    <xs:attribute name='command' type='xs:string' use='required'/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name='getCommonCommandParametersResponse' type='ParameterForm'/>
 
    <xs:element name='moveUp' type='NodeReferenceRequest'/>
    <xs:element name='moveUpResponse' type='EmptyResponse'/>
 
    <xs:element name='moveDown' type='NodeReferenceRequest'/>
    <xs:element name='moveDownResponse' type='EmptyResponse'/>
 
</xs:schema>]]>
        </code>
    </section1>
</xep>