<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
	<header>
		<title>Chat Interface for Internet of Things Devices</title>
		<abstract>
			This specification provides guidelines for how to create a chat interface for Internet of Things devices based on XMPP that both is intuitive for human users
			but at the same time is consistent with other Internet of Things extensions and underlying architecture. The ambition is also to create an interface that is
			both user friendly for human users and at the same time can be automated by machines and is consistent between manufacturers, in case other IoT-related extensions
			cannot be implemented.
		</abstract>
		<legal>
			<copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2013 by the XMPP Standards Foundation (XSF).</copyright>
			<permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
			<warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
			<liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
			<conformance>
				This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://www.xmpp.org/extensions/ipr-policy.shtml'>http://www.xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).
			</conformance>
		</legal>
		<number>xxxx</number>
		<status>ProtoXEP</status>
		<type>Standards Track</type>
		<sig>Standards</sig>
		<approver>Council</approver>
		<dependencies>
			<spec>XMPP Core</spec>
			<spec>XEP-0323</spec>
			<spec>XEP-0325</spec>
			<spec>XEP-0326</spec>
		</dependencies>
		<supersedes/>
		<supersededby/>
		<shortname>NOT_YET_ASSIGNED</shortname>
		<author>
			<firstname>Peter</firstname>
			<surname>Waher</surname>
			<email>peter.waher@clayster.com</email>
			<jid>peter.waher@jabber.org</jid>
			<uri>http://www.linkedin.com/in/peterwaher</uri>
		</author>
		<author>
			<firstname>Joachim</firstname>
			<surname>Lindborg</surname>
			<email>joachim.lindborg@sust.se</email>
			<jid>joachim.lindborg@jabber.se</jid>
			<uri>http://se.linkedin.com/in/joachimlindborg/</uri>
		</author>
		<revision>
			<version>0.0.1</version>
			<date>2013-10-30</date>
			<initials>pw</initials>
			<remark>
				<p>First draft.</p>
			</remark>
		</revision>
	</header>
	<section1 topic='Introduction' anchor='intro'>
		<p>
			There may be many reasons to create a human-to-machine interface using chat messages for Internet of Thing devices. Reasons may include creating a simple interface that
			can be accessed from mobile phones without special software and that can be used during installation of devices. The goal of this extension is to create rules for
			how such an interface is constructed, including chat syntax, to make the interface:
		</p>
		<ul>
			<li>
				simple and user-friendly for human users.
			</li>
			<li>
				possible to automate by macines.
			</li>
			<li>
				is consistent between manufacturers.
			</li>
			<li>
				is consistent with other Internet-of-Things extensions and possible underlying architecture.
			</li>
			<li>
				include both reading of sensors and control of actuators.
			</li>
		</ul>
		<p>
			All communication between user (human or machine) and device is done using normal text messages. Therefore, all examples in this document will only specify
			the actual text messages being sent, not the underlying XMPP XML stanzas.
		</p>
	</section1>
	<section1 topic='Requirements' anchor='reqs'>
		<p>
			Clients and devices must support sending and receiving of normal text messages. See XMPP core specifications for more details about syntax.
		</p>
	</section1>
	<section1 topic='Glossary' anchor='glossary'>
		<p>The following table lists common terms and corresponding descriptions.</p>
		<dl>
			<di>
				<dt>Actuator</dt>
				<dd>Device containing at least one configurable property or output that can and should be controlled by some other entity or device.</dd>
			</di>
			<di>
				<dt>Computed Value</dt>
				<dd>A value that is computed instead of measured.</dd>
			</di>
			<di>
				<dt>Concentrator</dt>
				<dd>Device managing a set of devices which it publishes on the XMPP network.</dd>
			</di>
			<di>
				<dt>Data Source</dt>
				<dd>
					A Data source contains a collection of nodes. Three types of data sources exist: Singular, Flat and Tree. Singular data sources only include one object.
					Flat data sources contain a list of objects and Tree data sources contain nodes formed as a tree graph with one root element.
				</dd>
			</di>
			<di>
				<dt>Field</dt>
				<dd>
					One item of sensor data. Contains information about: Node, Field Name, Value, Precision, Unit, Value Type, Status, Timestamp, Localization information, etc.
					Fields should be unique within the triple (Node ID, Field Name, Timestamp).
				</dd>
			</di>
			<di>
				<dt>Field Name</dt>
				<dd>Name of a field of sensor data. Examples: Energy, Volume, Flow, Power, etc.</dd>
			</di>
			<di>
				<dt>Field Type</dt>
				<dd>What type of value the field represents. Examples: Momentary Value, Status Value, Identification Value, Calculated Value, Peak Value, Historical Value, etc.</dd>
			</di>
			<di>
				<dt>Historical Value</dt>
				<dd>A value stored in memory from a previous timestamp.</dd>
			</di>
			<di>
				<dt>Identification Value</dt>
				<dd>A value that can be used for identification. (Serial numbers, meter IDs, locations, names, etc.)</dd>
			</di>
			<di>
				<dt>Localization information</dt>
				<dd>Optional information for a field, allowing the sensor to control how the information should be presented to human viewers.</dd>
			</di>
			<di>
				<dt>Meter</dt>
				<dd>A device possible containing multiple sensors, used in metering applications. Examples: Electricity meter, Water Meter, Heat Meter, Cooling Meter, etc.</dd>
			</di>
			<di>
				<dt>Momentary Value</dt>
				<dd>A momentary value represents a value measured at the time of the read-out.</dd>
			</di>
			<di>
				<dt>Node</dt>
				<dd>
					Graphs contain nodes and edges between nodes. In Internet of Things, sensors, actuators, meters, devices, gateways, etc., are often depicted as nodes whereas links between sensors (friendships)
					are depicted as edges. In abstract terms, it's easier to talk about a Node, rather than list different possible node types (sensors, actuators, meters, devices, gateways, etc.).
					Each Node has a Node ID. Nodes belong to a data source, and all nodes have a Node Type. Some nodes have a parent node, and some nodes have child nodes. Nodes with the same
					parent nodes a called sibling nodes.
				</dd>
			</di>
			<di>
				<dt>Node ID</dt>
				<dd>
					An ID uniquely identifying a node within its corresponding context. If a globally unique ID is desired, an architecture should be used using a universally accepted
					ID scheme.
				</dd>
			</di>
			<di>
				<dt>Node Type</dt>
				<dd>Each node has a Node Type. The Node Type defines the functionality of the node in the system.</dd>
			</di>
			<di>
				<dt>Parameter</dt>
				<dd>
					Readable and/or writable property on a node/device. The XEP-0326 &xep0326; deals with reading and writing parameters
					on nodes/devices. Fields are not parameters, and parameters are not fields.
				</dd>
			</di>
			<di>
				<dt>Peak Value</dt>
				<dd>A maximum or minimum value during a given period.</dd>
			</di>
			<di>
				<dt>Precision</dt>
				<dd>
					In physics, precision determines the number of digits of precision. In sensor networks however, this definition is not easily applicable. Instead, precision
					determines, for example, the number of decimals of precision, or power of precision. Example: 123.200 MWh contains 3 decimals of precision. All entities parsing and
					delivering field information in sensor networks should always retain the number of decimals in a message.
				</dd>
			</di>
			<di>
				<dt>Sensor</dt>
				<dd>
					Device measuring at least one digital value (0 or 1) or analog value (value with precision and physical unit). Examples: Temperature sensor, pressure sensor, etc.
					Sensor values are reported as fields during read-out. Each sensor has a unique Node ID.
				</dd>
			</di>
			<di>
				<dt>SN</dt>
				<dd>Sensor Network. A network consisting, but not limited to sensors, where transport and use of sensor data is of primary concern. A sensor network may contain actuators, network applications, monitors, services, etc.</dd>
			</di>
			<di>
				<dt>Status Value</dt>
				<dd>A value displaying status information about something.</dd>
			</di>
			<di>
				<dt>Timestamp</dt>
				<dd>Timestamp of value, when the value was sampled or recorded.</dd>
			</di>
			<di>
				<dt>Token</dt>
				<dd>
					A client, device or user can get a token from a provisioning server. These tokens can be included in requests to other entities in the network, so these entities can validate
					access rights with the provisioning server.
				</dd>
			</di>
			<di>
				<dt>Unit</dt>
				<dd>Physical unit of value. Example: MWh, l/s, etc.</dd>
			</di>
			<di>
				<dt>Value</dt>
				<dd>A field value.</dd>
			</di>
			<di>
				<dt>Value Status</dt>
				<dd>Status of field value. Contains important status information for Quality of Service purposes. Examples: Ok, Error, Warning, Time Shifted, Missing, Signed, etc.</dd>
			</di>
			<di>
				<dt>Value Type</dt>
				<dd>Can be numeric, string, boolean, Date &amp; Time, Time Span or Enumeration.</dd>
			</di>
			<di>
				<dt>WSN</dt>
				<dd>Wireless Sensor Network, a sensor network including wireless devices.</dd>
			</di>
			<di>
				<dt>XMPP Client</dt>
				<dd>Application connected to an XMPP network, having a JID. Note that sensors, as well as applications requesting sensor data can be XMPP clients.</dd>
			</di>
		</dl>
	</section1>
	<section1 topic='Use Cases' anchor='usecases'>
		<section2 topic='Readout of devices'>
			<section3 topic='Readout of standalone devices'>
				<section4 topic='Reading momentary values from single device or currently selected device'>
					<!-- TODO 
					Example:
					?
					-->
				</section4>
				<section4 topic='Reading all values from single device or currently selected device'>
					<!-- TODO 
					Example:
					??
					-->
				</section4>
				<section4 topic='Reading specific field value from single device or currently selected device'>
					<!-- TODO 
					Example:
					Temperature?
					-->
				</section4>
			</section3>
			<section3 topic='Readout of device behind concentrator'>
				<section4 topic='Reading momentary values from device behind concentrator'>
					<!-- TODO 
					Example:
					NodeID?
					-->
				</section4>
				<section4 topic='Reading all values from device behind concentrator'>
					<!-- TODO 
					Example:
					NodeID??
					-->
				</section4>
				<section4 topic='Reading specific field value from device behind concentrator'>
					<!-- TODO
					Example:
					NodeID.Temperature?
				
					Synonyms:
					Temperature@NodeID?
					-->
				</section4>
			</section3>
		</section2>
		<section2 topic='Control of devices'>
			<section3 topic='Control of standalone devices'>
				<section4 topic='Setting control parameter on single device or currently selected device'>
					<!-- TODO 
					Example:
					Output=75
				
					Synonyms:
					Output!75
				
					If list of control parametrs was last displayed (with positive index values N), the following is synonymous:
					N=75
					N!75
					-->
				</section4>
				<section4 topic='Listing control parameters on single device or currently selected device'>
					<!-- TODO
					Example:
					=?
				
					Synonyms:
					!?
				
					Output example:
				
					1) Control Parameter 1:Value 1
					2) Control Parameter 2:Value 2
					0) Back
					...
					-->
				</section4>
				<section4 topic='Displaying current value of control parameter on single device or currently selected device'>
					<!-- TODO
					Example:
					Output=?
				
					Synonyms:
					Output!?
				
					If there is no Field available for the device with the given name, but a control parameter exists for the given name, the following should be synonymous with Output=?:
					Output?
				
					If list of control parametrs was last displayed (with positive index values N), the following is synonymous:
					N=?
					N!?
					-->
				</section4>
			</section3>
			<section3 topic='Control of device behind concentrator'>
				<section4 topic='Setting control parameter on single device behind concentrator'>
					<!-- TODO 
					Example:
					NodeID.Output=75
				
					Synonyms:
					NodeID.Output!75
					Output@NodeID=75
					Output@NodeID!75
					-->
				</section4>
				<section4 topic='Listing control parameters on single device behind concentrator'>
					<!-- TODO
					Example:
					NodeID.=?
				
					Synonyms:
					NodeID=?
					NodeID.!?
					NodeID!?
					@NodeID=?
					@NodeID?
				
					Output example:
				
					1) Control Parameter 1
					2) Control Parameter 2
					0) Back
					...
					-->
				</section4>
				<section4 topic='Displaying current value of control parameter on single device behind concentrator'>
					<!-- TODO
					Example:
					NodeID.Output=?
				
					Synonyms: 
					Output@NodeID=?
				
					If there is no Field available for the device with the given name, but a control parameter exists for the given name, the following should be synonymous with NodeID.Output=?:
					NodeID.Output?
					Output@NodeID?
					-->
				</section4>
			</section3>
		</section2>
		<section2 topic='Configuring devices'>
			<section3 topic='Configuring standalone devices'>
				<section4 topic='Listing configuration parameters on currently selected device'>
					<!-- TODO:
					Example:
					:?
				
					Output example:
					1) param1:value1
					2) param2:value2
					...
					0) Back
					-->
				</section4>
				<section4 topic='Displaying current value of configuration parameter on currently selected device'>
					<!-- TODO:
					Example:
					Parameter:?
				
					If previous menu listed configuration parameters with positive integers N, the following is synonymous:
					N:?
				
					Note: If a node command is selected, this command points to parameters in the node command parameter set, not configuration parameter set.
					-->
				</section4>
				<section4 topic='Editing configuration parameter on currently selected device'>
					<!-- TODO:
					Example:
					Parameter:Value
				
					If previous menu listed configuration parameters with positive integers N, the following is synonymous:
					N:Value
				
					Note: If a node command is selected, this command points to parameters in the node command parameter set, not configuration parameter set.
					-->
				</section4>
			</section3>
			<section3 topic='Configuration of device behind concentrator'>
				<section4 topic='Listing configuration parameters on single device behind concentrator'>
					<!-- TODO:
					Example:
					NodeID:?
				
					Output example:
					1) param1:value1
					2) param2:value2
					...
					0) Back
					-->
				</section4>
				<section4 topic='Displaying current value of configuration parameter on single device behind concentrator'>
					<!-- TODO:
					Example:
					NodeID.Parameter:?
				
					Synonyms:
					Parameter@NodeID:?
					-->
				</section4>
				<section4 topic='Editing configuration parameter on single device behind concentrator'>
					<!-- TODO:
					Example:
					NodeID.Parameter:Value
				
					Synonyms:
					Parameter@NodeID:Value
					-->
				</section4>
			</section3>
		</section2>
		<section2 topic='Node Commands on devices'>
			<section3 topic='Node Commands on standalone devices'>
				<section4 topic='Displaying commands available on currently selected device'>
					<!-- TODO:
					Example:
					>?
				
					Output Example:
					1) Command 1 (Command 1 ID)
					2) Command 2 (Command 1 ID)
					...
					0) Back
					-->
				</section4>
				<section4 topic='Selecting command on currently selected device'>
					<!-- TODO:
					Example:
					>CommandID
				
					if No command with the given ID was found a search for Command names is done.
				
					If previous menu listed configuration parameters with positive integers N, the following is synonymous:
					>N
					N
				
					Output Example:
					1) Parameter 1:Value 1
					2) Parameter 2:Value 2
					...
					!) Execute
					0) Back
				
					Note: Simple commands might lack command parameters.
					-->
				</section4>
				<section4 topic='Editing command parameter in currently selected node command'>
					<!-- TODO:
					Example:
					Parameter:Value
				
					If previous menu listed configuration parameters with positive integers N, the following is synonymous:
					N:Value
				
					Note: This can only be done if a node command has been selected.
					-->
				</section4>
				<section4 topic='Executing currently selected node command'>
					<!-- TODO:
					Example:
					!
				
					Note:
					A node command has to be selected for this command to be available.
				
					Output: Depends on type of command.
					-->
				</section4>
			</section3>
			<section3 topic='Node Commands on device behind concentrator'>
				<section4 topic='Displaying commands available on single device behind concentrator'>
					<!-- TODO:
					Example:
					NodeID>?
				
					Output Example:
					1) Command 1 (Command 1 ID)
					2) Command 2 (Command 1 ID)
					...
					0) Back
					-->
				</section4>
				<section4 topic='Selecting command on single device behind concentrator'>
					<!-- TODO:
					Example:
					NodeID>CommandID
				
					if No command with the given ID was found a search for Command names is done.
				
					Output Example:
					1) Parameter 1:Value 1
					2) Parameter 2:Value 2
					...
					!) Execute
					0) Back
				
					Note: Simple commands might lack command parameters.
					-->
				</section4>
			</section3>
		</section2>
		<section2 topic='Browsing Data Sources and Nodes on a concentrator'>
			<section3 topic='Selecting Root Node in current data source'>
				<!-- TODO
				From the start, when starting chat session, the root node in the MeteringTopology data source is chosen by default.
				
				Example:
				/
				
				Selects the root node of the current data source. Displays a menu containing a list of children. Menu Items containing child nodes are numbered using positive integers.
				
				Output Example:
				
				1) Node A
				2) Node B
				...
				N) Node X
				0) Back
				
				Current selection after operation = Root node in current data source.
				-->
			</section3>
			<section3 topic='Selecting Root Data Source'>
				<!-- TODO
				Example:
				//
				
				Selects the root data source in the concentrator. Displays a menu containing a list of child sources. Menu Items containing child data sources are numbered using positive integers.
				Menu items containing references to any root nodes are numbered using capital letters [A-Z]+.
				
				Output Example:
				
				1) Source A
				2) Source B
				A) Root Node
				0) Back
				
				Current selection after operation = Root data source
				-->
			</section3>
			<section3 topic='Selecting Item'>
				<!-- TODO
				From the start, when starting chat session, the root node in the MeteringTopology data source is chosen by default.
				
				There are various ways to select an item:
				
				Specifying a positive integer, selects the item displayed in the menu shown in the previous selection. 
				
				Example:
				2
				
				Note: In a new session, no menu has been shown, and so no number can be given.
				
				Note 2: Nodes can change, be inserted, removed, moved, etc. When the menu is presented, the numbers needs to be remembered, so that if a user
				enters a number it selects the item represented by the number at the time the menu was presented.
				
				Specifying a caital letter (or sequence of capital letters) available in the last menu presented, selects the corresponding node.
				
				Example: 
				A
				
				If the currently selected item is a node in a data source, specifying a Node ID will select the Node in the current data source, whereever it exists, if
				a Node with that ID is available in the source.
				
				Example:
				NodeID
				
				Note: Selecting a Node in a data source, will make it possible to use the commands available for single devices as if they were made on the selected
				node directly.
				
				Example:
				NodeID
				Output=75
				
				Is the same as:
				NodeID.Output=75
				-->
			</section3>
		</section2>
		<section2 topic='Menu Commands'>
			<section3 topic='List current options' anchor='currentoptions'>
				<!-- TODO:
				Example:
				#
				
				The above shows the list of current options, without showing any syntax error message.
				
				Note: If a syntax error occurs during chat, an error message should be returned, followed by a list of current options as described here.
				
				Output Example:
				
				Describe following syntactic elements, or divide into a menu with only options available at the current level... ?
				
				?
				??
				FIELD?
				NODE_ID?
				NODE_ID??
				NODE_ID.FIELD?
				FIELD@NODE_ID?
				CONTROL_PARAMETER=VALUE
				CONTROL_PARAMETER!VALUE
				=?
				!?
				CONTROL_PARAMETER=?
				CONTROL_PARAMETER!?
				NODE_ID.CONTROL_PARAMETER=VALUE
				CONTROL_PARAMETER@NODE_ID=VALUE
				CONTROL_PARAMETER@NODE_ID!VALUE
				NODE_ID.=?
				NODE_ID=?
				NODE_ID.!?
				NODE_ID!?
				@NODE_ID=?
				@NODE_ID?
				NODE_ID.CONTROL_PARAMETER=?
				NODE_ID.CONTROL_PARAMETER!?
				CONTROL_PARAMETER@NODE_ID=?
				CONTROL_PARAMETER@NODE_ID!?
				:?
				PARAMETER:?
				PARAMETER:VALUE
				NODE_ID:?
				NODE_ID.PARAMETER:?
				PARAMETER@NODE_ID:?
				NODE_ID.PARAMETER:VALUE
				PARAMETER@NODE_ID:VALUE
				>?
				>COMMAND_ID
				>COMMAND_NAME
				COMMAND_PARAMETER:VALUE
				!
				NODE_ID>?
				NODE_ID>COMMAND_ID
				NODE_ID>COMMAND_NAME
				/
				//
				#
				0
				-->
			</section3>
			<section3 topic='Go to previous menu'>
				<!-- TODO:
				Example:
				0
				
				Note: If menu history empty => list current options (anchor:currentoptions).
				-->
			</section3>
		</section2>
		<!-- TODO: 
		Search in sub systems?
		Login & user authentication?
		-->
	</section1>
	<section1 topic='Syntax' anchor='syntax'>
		<!-- TODO 
		
		! and = synonyms (on some devices, = is difficult to write).
		NodeID.Field synonymt med Field@NodeID

		Control parameter values:
		==================================
		Boolean Values: ON/OFF/True/False/1/0 (case insensitive)
		Integer Values
		Double Values: (Use . or , as decimal separator)
		String Values: Literal, without ' or "
		Time Values: (days[.])?HH:mm(:SS)?
		Year Values: YYYY-MM-DD, or DD-MM-YYYY
		Date/Time Values: YYYY-MM-DD(, | |T)HH:mm(:SS)?, or DD-MM-YYYY(, | |T)HH:mm(:SS)?
		-->
	</section1>
	<section1 topic='Output format' anchor='output'>
		<!-- TODO
		How fields (readout results) are formatted/presented
		how control values are formatted/presented
		how parameters are formatted/presented
		Menu Items: ...) ..., where ") " signifies a menu item, the ... before is the menu selection and the ... is the description of the item in the menu.
		how readout errors are presented
		how configuration errors are presented
		how configuration results are presented
		how command execution results are presented (commands/queries)
		how command execution errors are presented.
		-->
	</section1>
	<section1 topic='Determining Support' anchor='support'>
		<p>If an entity supports the chat interface specified herein, it MUST advertise that fact by returning a feature of "urn:xmpp:iot:chat" in response to &xep0030; information requests.</p>
		<example caption="Service discovery information request">
			<![CDATA[
<iq type='get'
    from='user@clayster.com/chatclient'
    to='device@clayster.com'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]>
		</example>
		<example caption="Service discovery information response">
			<![CDATA[
<iq type='result'
    from='device@clayster.com'
    to='user@clayster.com/chatclient'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='urn:xmpp:iot:chat'/>
    ...
  </query>
</iq>]]>
		</example>
		<p>
			In order for an application to determine whether an entity supports this protocol, where possible it SHOULD use the dynamic, presence-based profile of service discovery defined
			in &xep0115;. However, if an application has not received entity capabilities information from an entity, it SHOULD use explicit service discovery instead.
		</p>
	</section1>
	<section1 topic='Implementation Notes' anchor='impl'>
		<section2 topic='Chat sessions'>
			<!-- TODO:
			* no activivity for 15 minutes: Session timeout. Reset position, etc.
			* Implementing on device not supporting concentrator: Implementations do not need to implement support for concentrator command syntax.
			* Node identification schemes: 1) Node ID, 2) Local Node ID, 3) implementation specific indices, for instance serial number, meter number, etc.
			* Field identification schemes: 1) Field ID, 2) Unlocalized field name, 3) Localized field name, with current client locale.
			* Parameter identification schemes: 1) Parameter ID, 2) Unlocalized parameter name, 3) Localized parameter name, with current client locale.
			* Command identification schemes: 1) Command ID, 2) Unlocalized command name, 3) Localized command name, with current client locale.
			-->
		</section2>
	</section1>
	<section1 topic='Internationalization Considerations' anchor='i18n'>
		<section2 topic='Localization'>
			<p>
				Localization of content can be performed if clients provide <strong>xml:lang</strong> attributes in messages made to the device. If omitted, the
				<strong>default language</strong> will be used in responses. If provided, but the concentrator does not support localization, or the requested language,
				the <strong>default language</strong> will also be used.
			</p>
		</section2>
	</section1>
	<section1 topic='Security Considerations' anchor='security'>
		<p>
			This document publishes a lot of commands with which to interact with a device. If security and access rights is an issue, it might not be sufficient
			to allow all friends access to the system. There are many ways in which to restrict access to the contents of the device. See &xep0324; and
			XEP-0326 <link url='http://xmpp.org/extensions/xep-0326.html'>Internet of Things - Concentrators</link> for more information on how to restrict access
			to parts of the device or contents on the device.
		</p>
	</section1>
	<section1 topic='IANA Considerations' anchor='iana'>
		<p>This document requires no interaction with &IANA;.</p>
	</section1>
	<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
		<p>This document does not specify any XMPP registrar considerations.</p>
	</section1>
</xep>